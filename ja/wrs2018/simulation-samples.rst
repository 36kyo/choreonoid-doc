シミュレーションサンプル
========================

ここではWRS2018のシミュレーションサンプルについて紹介します。

.. contents::
   :local:

.. highlight:: sh

概要
----

WRS2018の各タスクは、以下の要素を組み合わせたシミュレーションとして実行されます。

* 環境モデル
* ロボットモデル
* ロボットの制御ソフトウェア
* ロボットの操作インタフェース
* シミュレーション設定

環境モデルについては、タスクT1〜T6について、それぞれ対応するモデルが用意されています。これにロボットを加え、シミュレーションの設定を行うことで、タスクのシミュレーションができるようになります。

ここでロボットについては競技会の参加チームごとに変わってくる部分です。標準ロボットモデルをそのまま使うチームもあるかもしれませんが、それに変更を加えたり、独自のモデルを使用するチームもあるかもしれません。また、ロボットはモデルがあるだけでは動きません。ロボットを動かすための制御ソフトウェアや、遠隔操作を行うための操作インタフェースといった要素も必要です。これについても、競技の結果を大きく左右する重要な要素で、各チームごとに独自のものを構築することになるかと思います。

そのような次第で、競技会において実際に実行されるシミュレーションは、チームごとに異なるものとなるため、それと同じものを予めChoreonoidにバンドルして提供することはできません。

その代わりに、シミュレーションのサンプルとなるものを用意していますので、ここで紹介したいと思います。サンプルを実行して試すことで、本競技が実際にどのようなものであるかを把握することができるかと思います。

ただしサンプル自体は、ロボットの制御ソフトウェアや操作インタフェースにおいて最低限のものとなっています。これだけを用いて高得点を獲得することは難しいでしょうし、そもそも完遂するのが難しいタスクも多いです。ここで紹介するサンプルはあくまでタスクのイメージをつかむためのものであり、実際の競技においてはこれに含まれるものよりもずっと高度な制御ソフトウェアや操作インタフェースが必要になるものと思ってください。そのような部分の開発を競うというのも、本競技会の趣旨のひとつであると言えるでしょう。

プロジェクトの構成と読み込み
----------------------------

シミュレーションサンプルの :ref:`basics_about_project` は、Choreonoidソースの "sample/WRS2018" ディレクトリに格納されています。Choreonoidを :ref:`build-ubuntu_install` すると、shareディレクトリのprojectディレクトリ以下に同じものがインストールされます。

プロジェクトはいくつかのファイルに分けて構成されており、それらをPythonスクリプトで組み合わせて読み込むようになっています。これは、タスクが全部で6つあることに加えて、使用するロボットモデルやシミュレーション設定についても複数用意しており、それらの組み合わせをそのままプロジェクトファイルにしてしまうと、重複する内容を含む膨大な数のプロジェクトファイルが必要となるからです。その場合、何かひとつの要素を修正する際に、多数のプロジェクトファイルで同じ部分を修正する必要が生じ、管理が難しくなってしまいます。

プロジェクトを構成する要素としては以下のようなものがあります。

* タスクの環境モデル

 * タスクT1: T1.cnoid
 * タスクT2: T2.cnoid
 * タスクT3: T3.cnoid
 * タスクT4: T4.cnoid
 * タスクT5: T5.cnoid
 * タスクT6: T6.cnoid

 .. note:: タスクの環境を構成する個々のモデルファイルは、基本的に標準モデルディレクトリの WRS2018 ディレクトリ以下に格納されています。

* ロボットモデルと関連する設定

 * AizuSpiderSS (単腕簡易クローラ版）: AizuSpiderSS.cnoid
 * AizuSpiderSA (単腕AGXクローラ版）: AizuSpiderSA.cnoid
 * DoubleArmV7S (簡易クローラ版): DoubleArmV7S.cnoid
 * DoubleArmV7A (AGXクローラ版): DoubleArmV7A.cnoid
 * WAREC-1: WAREC1.cnoid

* シミュレーション設定

 * AIST物理エンジン (AGX Dynamics不要）: AISTSimulator.cnoid
 * AGX Dynamics: AGXSimulator.cnoid

これらを組み合わせたプロジェクトを構築するスクリプトとして、以下の形式のファイル名をもつPythonスクリプトを用意しています。

* タスク-ロボットモデル.py

例えば、タスクT1で、簡易クローラ版のAizuSpiderロボットを使うプロジェクトは、

* T1-AizuSpiderSS.py

というファイル名になります。

プロジェクトに対応するPythonスクリプトは、Choreonoid起動時に --python オプションによって指定することができます。

例えば :doc:`setup` / :ref:`wrs2018_install_choreonoid` に従ってChoreonoidをビルドした場合は、ソースディレクトリ上で ::

 bin/choreonoid --python sample/WRS2018/T1-AizuSpiderSS.py

と入力することで、上記のプロジェクトを読み込むことができます。

タスクT1の実行
--------------

まず最初のタスクであるT1（障害走破）のサンプルを試してみましょう。これについて、いくつかのバリエーションがありますので、以下で順番に解説します。また、他のタスクにも共通の内容についてもここで解説します。

AizuSpiderSS版の実行
~~~~~~~~~~~~~~~~~~~~

まずはAGX Dynamicsのライセンスがなくても実行できるサンプルを試しましょう。以下のようにChoreonoidを起動して、AizuSpiderSSモデルを対象としたサンプルを読み込んでみてください。 ::

 bin/choreonoid --python sample/WRS2018/T1-AizuSpiderSS.py

すると以下のような画面が表示されるかと思います。

.. image:: images/T1-AizuSpiderSS.png

ここで :ref:`simulation_start_simulation` を行いましょう。すると表示されているAizu Spiderロボットをゲームパッドで操作できるようになります。操作方法については、 :ref:`wrs_sample_controller_aizu_spider` にまとめていますので、そちらをご参照ください。

ロボットをうまく操作して、不整地を乗り越え障害物を避けながらトンネルの先の方に進んでいってください。このタスクでは、開始地点のゲートをくぐってから、トンネルの端のゴールのゲートを通り抜けると、タスクのクリアとなります。

ここで、画面の中央部に表示されているのは、ロボットに搭載されているカメラの画像です。本サンプルでは、このカメラ画像を見ながらロボットの遠隔操作を行うという設定になっています。一方で、画面の右側に表示されているのは、ロボットを斜め後方から見た視点となっています。ただし、これはロボットに搭載されているカメラの視点ではありませんので、ロボットの遠隔操作において使用することはできません。競技において、このような視点はシミュレーション用PCのみで表示し、観客への提示や審判の判定用に活用します。

ここで使用しているロボットモデル "AizuSpiderSS" では、クローラが簡易版となっています。これはChoreonoidに標準の :ref:`simulation_simulator_item` である "AISTシミュレータ" でシミュレーションを行うことが可能であり、本サンプルではそのように設定しています。ただし、動かしていただければ分かるように、クローラのベルト状の部分（履帯）が回転するわけではなく、履帯が動かないまま無理やり進んでいきます。これは :doc:`../simulation/pseudo-continuous-track` を適用したものです。この場合クローラの挙動はあまり実機に近いものとは言えず、環境との接触状況によっては動作が不安定になることもありますが、そこはこのシミュレーション方式の限界ということでご了承ください。今回の競技会でAGX Dynamicsを使用する理由のひとつは、この限界を超えるというところにあります。

なお、AISTシミュレータを使用するサンプルでは、テストのためAISTシミュレータに2つの設定を用意しています。ひとつは "AISTSimulator-Torque" というシミュレータアイテムで、そちらは指令値がトルク値となります。一方、 "AISTSimulator-Position" というシミュレータアイテムも用意しており、こちらはロボットの関節への指令値が位置（関節角度）指令となります。この両者で、制御ソフトウェアの記述方法や、シミュレーションの挙動が多少変わってきます。その詳細はここでは触れませんが、競技会ではAISTシミュレータは使いませんので、あまり気にしなくてもよいかと思います。ただし、シミュレーション実行時にどちらかのアイテムを選択しておく必要がありますので、その点はご注意ください。デフォルトではTorqueの方が選択されています。

トンネル内の不整地・障害物の形状や配置は、暫定的なもので、競技本番ではこれとは異なる環境の設定となる可能性が高いです。これは他のタスクの環境についても同様です。今回の競技の設定は、災害が発生しトンネル内の状況が分からない中でロボットを投入するというものなので、事前に環境が分かっていない方がより設定に近くなるというところもあり、ご了承いただければと思います。とは言え、今後競技本番の準備を進める中で、本番に近いサンプルも順次提供していければと思っています。また、不整地・障害物の形状や配置は :ref:`wrs2018_overview_rules` にも記述がありますので、ご確認ください。

シーンエフェクトついて
~~~~~~~~~~~~~~~~~~~~~~

T1のサンプルでは、上の図にもあるように、トンネル内の所々で煙を発生させています。これによってロボットの視界が悪くなることもあるため、競技においてはそのような中でもロボットがタスクを確実に進めるための工夫が求められます。

この煙は、シーンエフェクトと呼ばれるもので、:ref:`wrs2018_install_choreonoid` において BUILD_SCENE_EFFECTS_PLUGIN を ON にし、:doc:`../install/setup-renderer` もされていれば、有効となるものです。煙が表示されない場合はそれらの設定に不備がありますので、再度ご確認ください。シーンエフェクトとしては、他にも炎、水流等があり、他のタスクでも使われます。従って、競技を完全に再現するためには、シーンエフェクト機能が有効になっている必要があります。

ただし、シーンエフェクトを有効にすると、PCの負担も重くなります。シミュレーションを実行するPCのスペックが :ref:`wrs2018_overview_simulator` で提示したものと同等でない場合は、シミュレーションが遅くなったり、表示がスムーズでなくなったりすることがあります。その程度が大きく、参加の準備を進めるにあたって支障となる場合は、シーンエフェクトの機能をオフにしてご利用ください。

.. note:: シーンエフェクトの機能は、SceneEffectsプラグインによって実現しています。これは :ref:`wrs2018_install_choreonoid` においてBUILD_SCENE_EFFECTS_PLUGINをONにしなければビルドされません。ただし、既にビルドされてしまっている場合は、この設定を変えた上で、プラグインのファイルを削除しておく必要があります。プラグインファイルについては :ref:`basics_plugin_files` に説明がありますので、これをご参照の上、該当する "libCnoidSceneEffectsPlugin.so" の削除を行ってください。なお、シーンエフェクトを利用しない場合でも、 :doc:`../install/setup-renderer` はなるべく有効にしておいてください。

遠隔操作について
~~~~~~~~~~~~~~~~

本節で紹介するサンプルは、ロボットの操作も含めて全てシミュレーションを行うChoreonoid上で動作するというもので、 :ref:`wrs2018_overview_operation` で紹介した遠隔操作の構成とはなっていません。まずはタスクやシミュレーションの概要をつかんでいただくため、シンプルで扱いやすい構成としています。

その上で、遠隔操作化したサンプルについて、

* :doc:`teleoperation-rtm`
* :doc:`teleoperation-ros`

で紹介しますので、遠隔操作の構成を実現するにあたってはそちらを参考にしてください。

AizuSpiderSA版の実行
~~~~~~~~~~~~~~~~~~~~

次に、AGX Dynamicsを使用したシミュレーションを紹介します。競技本番はこちらで行うことになります。AGX Dynamicsのライセンスをお持ちで、 :ref:`wrs2018_install_agx` を済ませている方は、こちらも試してみてください。

単腕Aizu SpiderのAGX対応版モデルは "AizuSpiderSA" となります。以下のコマンドでこれに対応するT1のプロジェクトを読み込むことができます。 ::

 bin/choreonoid --python sample/WRS2018/T1-AizuSpiderSA.py

ロボットの操作方法は簡易版と同じですので、こちらもゲームパッドでロボットを操作してみてください。

AGX版の場合、履帯の部分が実際にホイールのまわりを回転しながら推進するようになります。実際にこれを用いて不整地状の走行などを試していただければ、クローラの挙動がより実物に近くなっていることがお分かりいただけるかと思います。

DoubleArmV7版の実行
~~~~~~~~~~~~~~~~~~~

双腕建機型ロボットDoubleArmV7モデルに対応したサンプルも用意しています。

簡易版、AGX版について、それぞれ

* T1-DoubleArmV7S.py
* T1-DoubleArmV7A.py

というPythonスクリプトが対応していますので、これまでと同様の要領で読み込んで実行してみてください。

操作方法については、 :ref:`wrs_sample_controller_doublearmv7` を参照してください。

Aizu Spider と比べるとロボットのサイズがだいぶ大きくなっているのが分かるかと思います。このため不整地上の走行はより容易になるかと思いますが、狭い箇所の通り抜けはより難しくなります。ただし障害物についてはロボットのサイズに応じて調整されることになっています。詳細は :ref:`wrs2018_overview_rules` を参照ください。

WAREC-1版の実行
~~~~~~~~~~~~~~~

WAREC-1モデルに対応したサンプルは、

* T1-WAREC1.py

になります。

このモデルについては、今のところサンプルコントローラを用意していません。

AizuSpiderやDoubleArmV7はクローラに指令を与えればとりあえず動かすことができますが、WARECの場合脚を統合的に制御して歩行動作などをさせないと動かすことができないため、とりあえず動かせるようにするだけでも、コントローラは複雑になってきます。そのような事情もあり、現状ではサンプルコントローラを提供できておりませんが、ご了承ください。

コントローラが設定されていないため、このサンプルでシミュレーションを開始すると、ロボットが重力で崩れ落ちるようになっています。

WAREC-1に関してはこのような状況のため、サンプルはT1タスクのみ用意しています。

なお、WAREC-1はAizu SpiderやDoubleArmV7 とは異なり、簡易版、AGX版といった区別はありません。サンプルとしては、AISTシミュレータ、AGXシミュレータの両方が読み込まれるようになっており、どちらでもシミュレーションが可能です。AGX Dynamicsがインストールされていれば、デフォルトでAGXシミュレータが選択されるようになっています。

マルチコプタ版の実行
~~~~~~~~~~~~~~~~~~~~
マルチコプタのサンプルとして、クアッドコプタモデルを使用した

* T1-Quadcopter.py

というシミュレーションプロジェクトを用意しています。

このプロジェクトでも、ゲームパッドで機体を操作することができます。コントローラは :doc:`../multicopter/index` の :ref:`multicopter_plugin_sample_simulation` のものを使用していますので、操作方法についてはそちらの解説を参照してください。


タスクT2〜T6について
--------------------

T2以降のタスクについても、サンプルプロジェクトを用意しています。プロジェクトの読み込みと実行はT1と同じ要領で行ってください。基本的には、T1のプロジェクトの "T1" の部分をT2〜T6のどれかに置き換えればOKです。ただし、タスクによってはT1と同じ設定のものが無いものあります。その点は予めご了承ください。

タスクT2
~~~~~~~~

T2は車両調査のタスクです。 

などとして、プロジェクトを読み込んでください。すると以下にようにモデルが表示されているかと思います。

.. image:: images/T2-AizuSpiderSS.png

ここでトンネル内に車両があります。これのドアを開けて、車内を調査します。

ドアはドアノブを操作して開けるようにしたく思っていますが、その部分は現在開発中です。その代わりにドアを少し開けてありますので、その隙間からハンドを入れることで開けることができるかと思います。ただしAISTシミュレータでは関節可動範囲を設定できないため、ドアのヒンジが可動範囲を超えても動いてしまいます。その部分はAGXシミュレータでは正しく動作します。

実際の競技では、調査対象となるターゲットマーカが環境中に複数設置される予定です。トンネル内を移動しながら、マーカの内容を読み取っていきます。また、これを遠隔操作で行う必要があります。遠隔操作の場合、ロボットに搭載されたカメラやセンサから得られる情報のみを頼りにタスクを遂行する必要があります。タスク遂行を高速かつ確実に行うためには、ロボットの自律性の向上も鍵になるかと思われます。


タスクT3
~~~~~~~~

タスクT3は道具を使用した車両内の調査と車両からの救助です。

一見T2と同様の構成になっていますが、車内には要救助者（ダミーターゲット）が閉じ込められています。実際の競技では、ドアは通常の操作では開かなくなっていますので、まずスプレッダを使用してドアのロックやヒンジを切断し、ドアを移動させた上で、ダミーターゲットを車内より搬出するという作業になります。ただしこの部分は現在開発中です。今回のプロトタイプではT2にダミータゲットが追加されただけの状態となっています。

タスクT4
~~~~~~~~

T4は経路の確保を行うタスクです。

プロトタイプでは、トンネル内に障害物がいくつか散らばっているので、それをロボットで押したり持ち上げたりして、これらの障害物を除去する操作を体験してください。双腕重機ロボットでも、Aizu Spiderでも、アームをうまく操作すれば障害物をつかんで持ち上げることも可能ですので、試してみて下さい。。正確な競技内容については、ルールブックをご参照ください。

タスクT5
~~~~~~~~

T5は消火作業のタスクです。

プロジェクトファイルは以下を用意しています。

このプロジェクトを読み込むと、トンネル内に以下の消火栓が設置されています。

.. image:: images/FireCabinet1.png

この消火栓の扉を開けると以下のようにホースのリールやバルブが入っています。

.. image:: images/FireCabinet2.png

ロボットをうまく操作して、消火栓の扉を開けて、リールを手前に引き出したり、バルブを回したりしてみてください。

このタスクも現在開発中であり、今後リールからホースを取り出せるようにします。消火栓内には今後ノズルも設置され、取り出したホースにノズルを接続し、バルブを回すと消火作業を開始することができます。トンネル内では火災が起きており、その箇所めがけてホースを操作します。ノズルのスイッチを入れると水が出ますので、それをうまく炎に当てて消火作業を行います。

タスクT6
~~~~~~~~

T6はショアリングとブリーチングを行うタスクです。このタスクも開発中で、プロトタイプはまだ用意できていません。
