
ソースコードからのビルドとインストール (Windows編)
==================================================

.. sectionauthor:: 中岡 慎一郎 <s.nakaoka@aist.go.jp>


.. contents:: 目次
   :local:


準備
----

コレオノイドをソースコードからビルドしてインストールするには、ビルドに必要なツールとライブラリを予め準備する必要があります。

* 必要なツール

  * Visual C++
    
    * バージョンは2017と2019に対応しています。
      
  * `CMake <http://www.cmake.org/>`_ (3.14.5)

- 必要なライブラリ

  * `Boost <http://www.boost.org/>`_ (1.70.0)
  * `Qt <http://www.qt.io/download-open-source/>`_ (5.13.0　5.10以上必須)


まず、上記のツールとライブラリをインストールして下さい。各ライブラリの括弧内の数値は、当方で利用し動作を確認したバージョンで、2019年7月時点での目安となるものです。最低のバージョンを指定しているライブラリ以外は、これらより古いバージョンのものに必ずしも対応しないわけではありませんし、一方でこれらよりバージョンが上のものでもビルドに失敗することもあり得ます。（正確に対応バージョンを特定するのは困難ですので、このような記述をご容赦ください。）一般的にはバージョン番号の２番目の値までが同じであれば、同様に使えると考えてよろしいかと思います。

各ツール・ライブラリのインストールに関する補足を以下に述べます。インストールは管理者権限を持つアカウントで行ってください。また、下図のようなユーザアカウントコントロールが表示された場合は、 **はい** をクリックして先に進めてください。

.. figure:: images/userAccount.png

.. note:: 以前のバージョンでは別途 `Eigenライブラリ <http://eigen.tuxfamily.org/>`_ のインストールも必要でしたが、最新の開発版（次期バージョン1.8.0）では、Choreonoidのソースに付属のものをデフォルトで使用するようになりました。その場合Eigenを別途インストールする必要はありません。

.. _install_visualc++:

Visual C++
~~~~~~~~~~

ChoreonoidをコンパイルするためのC++コンパイラとして、Microsoft製のVisual C++ (Visual Studioに含まれるC++コンパイラ）を用いることができます。

Visual Studioにはいくつかのエディションがありますが、 `無料版のVisual Studio Community <https://visualstudio.microsoft.com/ja/free-developer-offers/>`_ をダウンロードして使用することも可能です。

現在の最新版は2019です。2017については、 `以前のVisual Studio ソフトウェアのダウンロード <https://visualstudio.microsoft.com/ja/vs/older-downloads/>`_ からダウンロードできます。

インストールするコンポーネントには「C++によるデスクトップ開発」を選択してください。

CMake
~~~~~

ビルド方法を記述するためのツールです。Choreonoidのビルド方法は本ツールの形式で記述されており、WindowsにおいてはそこからVisual Studio のプロジェクトファイルを生成することが可能です。 

`CMakeのダウンロードページ <https://cmake.org/download/>`_ よりWindows版のインストーラ"Windows win64-x64 Installer"をダウンロードできます。

.. figure:: images/CMakeInstall1.png

**cmake-x.x.x-win64-x64.msi** をクリックしてダウンロードし、これを実行してインストールを行ってください。表示されるメッセージに従って進め、

.. figure:: images/CMakeInstall2.png

図のような画面になったら、 **Add CMake to the system PATH for all users** を選択してください。

他の設定はデフォルトのままで大丈夫です。

Boost
~~~~~

C++の便利なライブラリ集です。ダウンロードは `Boost Downloads <http://www.boost.org/users/download/>`_ のページから行うことができます。

ソースをダウンロードした場合はコンパイルが必要となります。あらかじめWindows用にコンパイルされたバイナリを入れてくれるインストーラがありますので、そちらを使うのが簡単です。上記ページに `Prebuilt windows binaries <https://sourceforge.net/projects/boost/files/boost-binaries/>`_ というリンクがあるので、そちらを開いてください。

Visual C++ 2019 用のバイナリは現在のところBoostバージョン1.70.0以降になるようです。1.70.0のフォルダをクリックして、その中にある

* boost_1_70_0-unsupported-msvc-14.2-64.ext

というファイルをダウンロードしてください。ちなみにVisual Studio 2019がリリースされたばかりなので unsupported となっているようですが、今後はunsupprotedではなくなると思われます。

Visual C++ 2017の場合は、

* boost_1_70_0-msvc-14.1-64.ext
 
というファイルが対応します。

ダウンロードしたファイルを実行することで、インストールを行うことができます。インストール先はデフォルトでは "C:\\local\\boost_1_70_0" といったフォルダになります。これを変更しなければ、この後の手順でCMakeが自動的にBoostを検出するようになります。変更する場合は、フォルダを手動で指定する必要があるので覚えておいて下さい。
 
Qt
~~

QtはGUIを含む総合的なフレームワークライブラリで、ChoreonoidでもGUIのベースとして使っています。

Qtのインストーラは `Qtのダウンロードページ <https://www.qt.io/download>`_ にて取得できます。下図のようにCommercial版とOpen Source版が選択できるページになります。Open Source版で大丈夫ですので、そちらを選択してください。

.. figure:: images/QtInstall1.png

次のページに移動するとOSにあったインストーラが提示されます。

.. figure:: images/QtInstall2.png

"Recommended download: Qt Online Installer for Windows" と表示されていることを確認して、"Download"のボタンを押してダウンロードを行ってください。ダウンロードしたファイルを実行すると、ログインを求められますが、skipボタンを押して先に進んでしまって大丈夫です。

インストール先はデフォルトでは "C:\\Qt" といったフォルダになります。これを変更しなければ、CMakeが自動的にQtを検出するようになります。変更する場合は、フォルダを手動で指定する必要があるので覚えておいて下さい。

途中、下図のようなコンポーネントの選択画面で、インストールするライブラリを選択します。

.. figure:: images/QtInstall3.png

最新バージョンの **5.13.0** を選択します。

さらにその中から使用するVisual C++のバージョンにあったものを選択します。

現時点では Visual C++ 2019用のものは無いようなのですが、試したところ2019でも2017用のものが使えるようです。Visual C++ 2017, 2019いずれの場合も **MSVC2017 64bit** を選択してください。

後はインストーラの指示に従って進めます。


ソースコードの取得
------------------

リリース版
~~~~~~~~~~

Choreonoidのリリース版のソースコードは、 `ダウンロード <http://choreonoid.org/ja/download.html>`_ のページからダウンロードすることが可能です。このページにある「ソースパッケージ」の該当するバージョンをダウンロードしてください。ファイルはZIPファイルになっていますので、エクスプローラ等を用いて適当なディレクトリに展開してください。

展開すると choreonoid-1.6.0 といったディレクトリが生成されます。このディレクトリの中にソースコード一式が格納されており、本マニュアルではこれを今後 **「ソースディレクトリ」** と呼ぶことにします。

開発版
~~~~~~

Choreonoid開発版も利用可能です。これは `git <http://git-scm.com/>`_ リポジトリとして管理されており、 `github <https://github.com/>`_ の以下のアドレスにて公開されています。

- https://github.com/choreonoid/choreonoid

ここからソースを取得するには2つの方法があります。

* Gitツールで取得する
* Zipファイルで取得する

Gitツールで取得する
^^^^^^^^^^^^^^^^^^^

リポジトリの利用にあたってはgit用ツールが必要です。無料で公開されているツールがいくつかありますが、ここではVisual Studioのgitツールを使用する方法と、コマンドプロンプトタイプのツールを使用する方法を説明します。もちろん、使い慣れたツールがあればそれを御使用ください。

Visual Studio を使用する
^^^^^^^^^^^^^^^^^^^^^^^^

Visual Studio を起動し、メニューの **表示** ー **チームエクスプローラー** を選択して、表示させます。

.. figure:: images/VSgithub1.png

図の赤丸で示したアイコンをクリックします。

.. figure:: images/VSgithub2.png

ローカルGitリポジトリで、 **複製** をクリックします。

.. figure:: images/VSgithub3.png

赤枠で示した上段にchoreonoidのリポジトリのURLを入力し、下段にソースを置くディレクトリを入力して、複製ボタンを押します。

ソースがクローンされます。

一度、クローンした後は、下図のようにchoreonoidを選択し右クリック、プルダウンメニューより開くを選択します。

.. figure:: images/VSgithub4.png

表示が下図のように変わったら、同期を選択し、プルをクリックすると、その時点での最新のソースコードにアップデートできます。

.. figure:: images/VSgithub5.png

git for windows を使用する
^^^^^^^^^^^^^^^^^^^^^^^^^^

次にコマンドプロンプトタイプのツールについて説明します。

`Windows用Git <https://git-for-windows.github.io/>`_ からファイルをダウンロードして実行してください。インストーラの指示に従って進めます。設定はデフォルトのままでよいと思いますが、途中下図の様に表示されたら"Use Git from the Windows Command Prompt"を選ぶと、PATHを通してくれます。

.. figure:: images/GitSetup.png

インストールが終了したら、コマンドプロンプトを開いて、choreonoidのソースを保存したいディレクトリに移動して、以下のコマンドを実行します。::

 git clone https://github.com/choreonoid/choreonoid.git

これによってリポジトリを格納した "choreonoid" というディレクトリが生成されます。以降はこのディレクトリ内で ::

 git pull

などとすることにより、その時点での最新のソースコードにアップデートできます。

以上でソースコードの取得はできますが、gitの詳しい使用方法についてはgitのマニュアルや解説記事を参照してください。


Zipファイルで取得する
^^^^^^^^^^^^^^^^^^^^^

ウェブブラウザを使用して `Choreonoidのリポジトリ <https://github.com/choreonoid/choreonoid/>`_ を開き、赤四角で示した緑の **Clone or download** ボタンをクリックすると、次のように表示されます。

.. figure:: images/downloadZip.png
   :width: 600px

赤丸で示した、青の **Download ZIP** をクリックすると、最新の内容がZip形式でダウンロードできます。ダウンロードしたファイルをソースを置くディレクトリに展開します。
 
この方法は簡単ですが、 **git pull** コマンドは、二回目以降は更新されたファイルだけを取得できるのに対し、この方法は、毎回全てのファイルをダウンロードすることになります。

.. _build-windows-cmake:

CMakeによるビルド設定
---------------------

まず、スタートメニューからCMake(cmake-gui)を起動します。すると下記のようなダイアログが表示されます。

.. figure:: images/cmake0.png
   :width: 600px

次に、上図の赤枠①で示された **where is the source code** の右側の入力ボックスにコレオノイドのソースディレクトリを入力します。 **Browse Source...** をクリックすると、ディレクトリ選択ダイアログが開くので、そこから選択してもいいです。次に **where is build the binaries** の右側の入力ボックスにコレオノイドをビルドするディレクトリを入力します。ビルドするディレクトリはソースコードと同じでも構いませんが、わかりにくくなるかもしれませんので、ソースディレクトリの下にbuildというディレクトリを作成して、そこを入力することにします。入力したら、赤枠②の "Configure" を押します。

ビルドするディレクトリが予め作成されていない場合、ここで作成するか否かの確認のダイアログが表示されます。

次に、下図のようなダイアログが開きます。赤枠のプルダウンメニューから、コンパイラを選びます。

.. figure:: images/cmake1.png

使用する Visual C++のバージョンにあわせて、

* Visual Studio 16 2019 Win64
* Visual Studio 15 2017 Win64

のいずれかを選択します。

CMakeの最近のバージョンではさらに "Optional platform for generator" という項目も表示されます。特に選択しなければ64ビット版（x64）となるようですが、明示的に選択することもできます。

選択が完了したら **Finish** ボタンを押します。すると、CMakeのConfigureが進行し、コンパイラやライブラリ等の検出が行われます。

.. note:: この際に "The C compiler identification is unkown", "The CXX compiler identification is unkown" というメッセージが表示されるかもしれません。この場合は、Visual C++ のコンパイラが正しく検出されていません。原因は不明ですが、開発者の環境のひとつでこの症状が発生したことがあります。この場合、これ以降の処理を正しく進めることができません。

 これについては、CMakeを管理者権限で実行したところコンパイラも検出されるようになり、その後の処理も進めることができるようになりました。これを行うには、CMakeのアイコンを右クリックすると出るメニューで「管理者として実行」を選択するなどします。もしこの不具合が発生した場合は、この対処法を試してみてください。
 
.. note:: Windows環境に、pkg-config.exe というプログラムがインストールされている場合、この作業中にエラーが起きることがあります。そのような場合は、pkg-config.exeをアンインストールして頂けますようお願いいたします。

ライブラリのインストールで、デフォルトのディレクトリを選択している場合、自動的にライブラリが検出され、次のように最後の行に **Configuring done** と表示されると思います。

.. figure:: images/cmake2.png

（他のディレクトリにインストールしている場合は、エラーが表示されると思います。その場合の設定は、後で説明します。）

次にインストール先を設定します。 下図のように中央の表示をスクロールして **CMAKE_INSTALL_PREFIX** という項目を表示します。

.. figure:: images/cmake3.png

デフォルトでは "c:\\Program Files\\Choreonoid" になっています。しかし、Windowsでは "c:\\Program Files" 以下は、管理者以外はアクセス不可になっているようですので、インストール時に失敗する可能性があります。管理者権限で実行してそこにインストールしてもよいのですが、他のディレクトリにインストールした方が扱いやすい場合もあります。
その場合は、 **CMAKE_INSTALL_PREFIX** に適当な、例えば "c:\\choreonoid\\program"といったディレクトリを指定してください。

設定を終えたら、**Configure** ボタンを押して、再度 **Configuring done** と表示されることを確認してください。

.. figure:: images/cmake4.png

次にVisual Studio のプロジェクトファイルを生成するために、"Generate" を押します。"Generate"のボタンが押せるようになっていない場合は、再度"Configure"を押します。

ソリューションファイルの生成が終了すれば、メッセージ出力部に “Generating done” と表示されます。

次にエラー表示が出た場合や、他の設定を変更したい場合の手順について説明します。ここまで、エラーが表示されなかった方は、 :ref:`build-windows-visualstudio` に進まれた後に読んでくださっても結構です。

ライブラリの検出が自動で出来なかった場合、図のようなエラーダイアログが表示されます。

.. figure:: images/cmake5.png

**OK** を押してダイアログを消します。下の段のメッセージが表示されているウィンドウを上からスクロールして、Errorが表示されているところをみつけます。Warningは
無視してください。下の方に表示されているエラーは上のエラーが原因でおきていることがあるので、上から探してください。

下図では、Boostライブラリがみつからなかったエラーが出ています。

.. figure:: images/cmake6.png

上の設定項目にはBOOST_ROOTがありません。この場合は、赤丸で示した **Add Entry** ボタンを押します。ダイアログが表示されるので下図のように入力します。

.. figure:: images/cmake7.png

**Value** の欄にBoostライブラリのインストールディレクトリを指定します。 **OK** を押してダイアログを閉じ、下図のようにBOOST_ROOTが追加されていることを確認してください。

.. figure:: images/cmake8.png

**Configure** ボタンを押して下さい。

QT5に関するエラーが表示されたら、 **Qt5Core_DIR** に Qt5CoreConfig.cmake というファイルの保存場所（おそらく(Qtのインストール先)/5.11/msvc201x_64/lib/cmake/Qt5Coreにあります。）を入力してください。QT5の他のライブラリについてもエラーが表示されているかと思いますので、同じように入力してください。ワーニングは無視して大丈夫です。

後は、必要に応じてビルドに関する他の様々なオプションを設定することが可能となっています。
例えば、コレオノイドが備えているいくつかの機能はデフォルトではオフになっていますが、
BUILD_で始まるオプションを、必要に応じてそれらをオンにすることができます。

必要なライブラリのインストール先が全て特定され、エラーが出なくなるまで、上記と同様の設定を繰り返してください。

必要な設定を終えたら、"Generate" を押して下さい。

.. note:: 他のライブラリに関しても、CMakeのバージョンやインストールしたライブラリのバージョン、インストール箇所などによっては、検出できずに同様のエラーが出ることがあります。また、以下で説明するオプションの選択によっても、エラーが出る場合があります。エラーがでる順番も、インストールの状況によってかわります。この場合、上記と同様に、エラー箇所を探し、手動でインストール先を入力するようにしてください。

.. note:: 設定した内容は、 **Where to build the binaries** で指定した箇所に、 **CMakeCache.txt** というファイルで保存されています。設定を初めからやり直したい場合は、このファイルを削除してください。CMakeのメニューから **File** - **Delete Cache** としても削除されます。

.. _build-windows-visualstudio:

Visual Studio の起動とソリューションの読み込み
----------------------------------------------

次はコレオノイドのビルドを行います。 

これまでの操作で、**CMake** の **where is build the binaries** で指定した場所に Visual Studio のソリューションファイル **Choreonoid.sln** が生成されているはずです。これをダブルクリックして下さい。

Visual Studio が起動し、ソリューションファイルがオープンされていると思います。

もし Visual Studio が起動しない場合には、インストール時に何かあったかもしれませんので、Visual Studio を再インストールするか、関連付けを修正してみてください。あるいは、まず Visual Studio を起動し、その後 Visual Studio のメニューからソリューションファイルを読み込めばうまくいくかもしれません。

Visual Studio 2017と2019でのビルド操作は同じですので、以下の説明では、どちらのバージョンかを特定していません。従いまして、画面デザインなどは異なる場合があります。

コンパイル
----------

ソリューションの読み込みが終われば、下図のような画面になります。
ここで、赤枠の部分を **"Release"** に変更し、 **x64** と表示されていることを確認して下さい。
なお、"Debug"にすると、デバッグ可能なバイナリを生成することができます。ただしこれは"Relese"でコンパイルしたものと比べて圧倒的に遅くなってしまうので、デバッグが必要な時以外は、"Release"でコンパイルしたバイナリを使うようにします。

.. figure:: images/VS1.png

次に、コレオノイドのビルドを実行します。メニューのビルドをクリックすると下図のようなプルダウンメニューが出てきますので、赤枠にあるように "ソリューションのビルド(B)" を選択して下さい。
すると、コレオノイドのビルドが開始されます。
下部のメッセージウィンドウで最後に、 **“0 失敗”** と出てくればコンパイルは終了です。

.. figure:: images/VS2.png


.. _build-windows-install:

インストール
------------

コレオノイドのビルドが終了したら、最後にインストールを実行します。
インストールは、下図にあるように、上段左の "ソリューションエクスプローラ" で "INSTALL" のプロジェクトの部分を右クリクするとメニューが表示されます。このメニューの最上部に "ビルド(U)" がありますので(下図の赤枠部分です)、それを選択して下さい。正常に終了すれば、CMakeの時の **CMAKE_INSTALL_PREFIX** で指定されたディレクトリの下に、コレオノイドのバイナリがコピーされます。CMakeによるソリューションファイル生成時に **INSTALL_DEPENDENCIES** の項目にチェックを入れておけば、依存ライブラリのバイナリもコピーされます。

.. figure:: images/VS3.png

以上でコレオノイド のインストールは終了です。

インストール先の **bin** ディレクトリにある **choreonoid.exe** をダブルクリックすることで、コレオノイドが起動します。


オプション機能のビルド
----------------------

コレオノイドでは、上記手順のデフォルト状態で有効になるもの以外にも、いくつかのモジュールやプラグイン、サンプル等があります。それらは、CMakeの設定で有効にすることで、ビルドすることができます。
ここではそれらオプション機能のうちいくつかのビルドについて述べます。
:doc:`options` にて他のオプションについてもまとめてありますので、そちらもご参照ください。

各プラグインが使用しているライブラリのインストール方法も簡単に説明していますが、ライブラリのバージョンアップなどにより大きく変更されている場合もあります。
また、開発元のホームページが更新され、リンク先が変更されている場合もあります。
そのような場合は、ライブラリ名、「インストール」、等をキーワードにしてネット検索して頂くと、新しい情報を見つけることができるかと思います。

.. note:: CMakeでオプション機能の設定を行った上で **Configure**, **Generate** ボタンを押すとソリューションファイルが更新されます。このファイルを用いてVisual Studioでコンパイル、インストールを行うことでオプションのプラグインが生成されます。CMakeでオプションの変更を行った後は、必ずコンパイル、インストールの作業を行ってください。

Assimpプラグイン
~~~~~~~~~~~~~~~~

様々な形式の３次元モデルデータを読み込むためのライブラリ **Open Asset Import Library (Assimp)** をコレオノイドで使用するためのプラグインです。
このプラグインを利用するためには、Assimpライブラリをソースからビルドしてインストールしておく必要があります。

`githubのassimp <https://github.com/assimp/assimp/>`_ のページをブラウザで開きます。

.. figure:: images/assimp1.png
   :width: 800px

①ので示す、 **Branch: master** をクリックし、②の **Tags** をクリック、バージョンを選択します。現在動作確認しているバージョンは、4.1.0になります。図ではv4.1.0を選択しています。

.. figure:: images/assimp2.png
   :width: 800px

**Tag: v4.1.0** に表示が変わったことを確認し、 **Clone or download** をクリック、 **Download ZIP** をクリックして、Zip形式のソースファイルをダウンロードします。

Zipファイルを展開します。

CMakeが利用できますので、Choreonoidのビルドの説明と同様にCMakeを操作し、Visual Studio のプロジェクトファイルを作成します。CMakeのオプション設定の変更は必要ありません。

インストール先 **CMAKE_INSTALL_PREFIX** は **c:\\Program Files\\Assimp** になっていますが、 **c:\\local** 以下にしておけば、自動で検出しますので、なるべく **c:\\local\\Assimp** と指定してください。

.. figure:: images/assimp3.png

Visual Studioでのコンパイル、インストール操作も、Choreonoidの場合と同様に行ってください。

Assimpのインストールが出来ましたら、再びCMakeを起動して、Choreonoidのソースとビルドのディレクトリを指定します。

前回設定した内容は保存されているので、今回はAssimpに関する設定だけをすれば大丈夫です。（新たにビルドディレクトリを指定した場合など、保存されている設定がない場合は、次の操作はしないで **Configure** を押してください。）

.. figure:: images/assimp4.png

図のように **ASSIMP_DIR** の値は **ASSIMP_DIR-NOTFOUND** と表示されているかと思います。

.. figure:: images/assimp5.png

その下の方に **ENABLE_ASSIMP** という項目があるのでこれを選択し、**Remove Entry** ボタンを押して、この項目を削除します。その後、 **Configure** を押すと、Assimpが自動で検出されるはずです。

自動検出に失敗する場合は、**ENABLE_ASSIMP** を **ON** にして **ASSIMP_DIR** に手動で入力します。この時、Assimpのインストール先のトップディレクトリではなく、AssimpのCMakeファイルが入っているディレクトリを指定する必要があります。 **インストール先\\Assimp\\lib\\cmake\\assimp-4.1** にあると思います。

後は、choreonoidのビルド手順を行ってください。

Mediaプラグイン
~~~~~~~~~~~~~~~

メディアファイルの再生を行うプラグインです。CMake上で **BUILD_MEDIA_PLUGIN** をONにしてください。

MPEG-4ファイルなどメディアファイルの形式によっては、再生できないものがありますが、ファイル形式に対応したコーデックパックをインストールすることで、できるようになります。コーデックパックは、ネット上で検索すれば無料のものが、すぐに見つかると思いますが、他の動画ソフトなどに影響を与えるものもあるようなので、ここでは特に指定しません。ご自身のシステムにあったものをご利用ください。


ODEプラグイン
~~~~~~~~~~~~~

オープンソースーの動力学計算ライブラリである"Open Dynamics Engine (ODE)"を、コレオノイドのシミュレーション機能の計算エンジンとして利用できるよにするプラグインです。

本プラグインをビルドして利用するためには、ODEライブラリのインストールが必要です。ビルド済みのライブラリは公開されていないようなので、ソースからビルドする必要があります。
`Open Dynamics Engine <http://www.ode.org/>`_ のサイトからファイルをダウンロードして展開してください。現在当方でテストを行ったバージョンは0.12になります。（0.13では動作しない不具合が報告されています。）

.. figure:: images/ODEinstall1.png
   :width: 700px

**Get the source code here.** をクリックします。

.. figure:: images/ODEinstall2.png
   :width: 800px

**ODE** - **0.12** と進んで、 **ode-0.12.tar.gz** をクリックすると、ファイルがダウンロードされます。

(tar.gz形式のファイルですので、windowsでは解凍用のソフトが必要です。インストールされていない場合は、 **Lhaplus** など無料で使用できるソフトがありますので、インストールしてください。)

ファイルを展開して、ビルドします。

ODEのビルドにはpremakeというコマンドを使用します。コマンドプロンプトを起動し、展開したディレクトリの下のbuildというディレクトリに移動します。
そこで ::

 premake4.exe --with-libccd --platform=x64 vs2008
 
を実行します。すると、vs2008というディレクトリが作成され、中にode.slnが作成されます。(ode0.12ではvs2008までしかサポートされていないので、2008用のソリューションファイルを作成します。)
Visual Studioを起動して、このファイルを開くと、ソリューションを変換するダイアログが開きます。**OK** ボタンを押して実行してください。

.. figure:: images/ODEbuild1.png
   :width: 600px

いくつかワーニングが表示されますが、無視しても大丈夫なようです。

.. figure:: images/ODEbuild2.png
   :width: 600px
   
変換されたソリューションファイルを用いて、ビルドします。ソリューション構成で **ReleaseDoubleDLL** と **x64** を選択、確認してください。ビルドが成功すると **lib\\ReleaseDoubleDLL** に **ode_double.*** というファイルが作成されます。

後はコレオノイドのビルドに関するCMakeの設定で、 **BUILD_ODE_PLUGIN** という項目を "ON" にし、 **ODE_DIR** にODEのlibの上のディレクトリを指定してください。


Bulletプラグイン
~~~~~~~~~~~~~~~~

オープンソースの動力学計算ライブラリである"Bullet Physics ライブラリ"を、コレオノイドのシミュレーション機能の計算エンジンとして利用できるようにするプラグインです。

本プラグインをビルドして利用するためには、Bullet Physics ライブラリのソースからのビルドが必要です。
`githubのbulletphysics <https://github.com/bulletphysics/bullet3>`_ からソースが取得できます。当方でテストを行ったバージョンはbullet-2.83.7になります。これ以降のバージョンでは動作確認できていません。

Assimpプラグインのところで説明したのと同様の手順で、ブラウザでページを開いて、バージョンを選択してから、ZIPファイルをダウンロードします。

CMakeが使用できますので、いままでの説明と同様にCMakeを操作し、Visual Studio のプロジェクトファイルを作成します。
以下のオプションはONに切り替えておきます。

* **BUILD_EXTRAS**
* **INSTALL_EXTRA_LIBS**
* **INSTALL_LIBS**
* **USE_DOUBLE_PRECISION**
* **USE_MSVC_RUNTIME_LIBRARY_DLL**

また、以下のオプションはOFFにしておいた方が無難です。

* **BUILD_XXX_DEMOS** のすべて
* **BUILD_BULLET3**
* **BUILD_UNIT_TESTS**

インストール先は  **CMAKE_INSTALL_PREFIX** で設定します。

Visual Studioでのコンパイル、インストール操作も同じように行います。

Bulletのインストールが出来ましたら、再びCMakeを起動し、コレオノイドのビルドに関するCMakeの設定で、 **BUILD_BULLET_PLUGIN** という項目を "ON" にし、**BULLET_DIR** にBulletライブラリのインストール先を指定してください。

Pythonプラグイン
~~~~~~~~~~~~~~~~

Pythonスクリプトの読み込み・実行や、コレオノイド上で動作するPythonコンソール等の機能を使用するためのプラグインです。

本プラグインをビルドして利用するためには、Pythonのインストールが必要です。動作確認しているバージョンは2.7.15と3.6.3になります。ここではPython3のインストール方法について説明します。

`Python <http://www.python.org/>`_ のサイトから、Python3のダウンロードページに移動します。 **Windows x86-64 executable installer** をダウンロードし、実行します。

.. figure:: images/Python3install1.png
   :width: 600px

Python2.7をインストールしていない場合は、 **Add Python 3.7 to PATH** にチェックを入れます。Python2.7をインストールしている場合は入れないでください。 **Install Now** をクリックして、インストールします。

次に、**Numpy** をインストールします。

Numpyは、Choreonoidから使用するPythonに対してインストールします。Python2, Python3の片方だけをインストールしている場合は、そこにPATHが通っていますので、コマンドプロンプトを開いて次のコマンドを実行します。 ::

  python -m pip install numpy
 
両方インストールしている場合、Python2にPATHが通っています。Python3にインストールするために、Python3がインストールされているディレクトを指定してコマンドを実行します。コマンドプロンプトを開いて、 ::

  C:\Users\(ユーザ名)\AppData\Local\Programs\Python\Python37\python -m pip install numpy
  
のようにします。C:\\Users\.... はデフォルトのインストール先ですので、必要に応じて変更してください。

インストールが終了したら、再度choreonoid用のCMakeを開き、 **ENABLE_PYTHON** , **BUILD_PYTHON_PLUGIN** , **BUILD_PYTHON_SIM_SCRIPT_PLUGIN** という項目を "ON"にしてください。

.. note:: Python3にPATHが通っていない場合、choreonoidの起動時にPATHを通す必要があります。 ::

              set PATH=(Python3のインストール先);%PATH%
              choreonoid
          
          のように記述したバッチファイルを準備して、これを実行するようにすると簡単かと思います。


プラグインのアンインストール
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**BUILD_XXX_PLUGIN** のオプションをオンにしてインストールしたプラグインは、その後オプションをオフにしてインストールしても削除されません。プラグインを追加して動作が不安定になった場合など、プラグインを削除したい場合は、手動でファイルを削除してください。プラグインは(コレオノイドのインストール先)/lib/choreonoid-1.7にCnoid***Plugin.dllとしてインストールされています。
