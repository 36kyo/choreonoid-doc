
ソースコードからのビルドとインストール (Ubuntu Linux編)
========================================================

.. sectionauthor:: 中岡 慎一郎 <s.nakaoka@aist.go.jp>

Linuxには様々なディストリビューションがありますが、現在のところコレオノイドが公式にサポートしているディストリビューションは Ubuntu Linux になります。本ドキュメントでは、Ubuntu Linux におけるコレオノイドのソースコードからのビルド方法について説明します。ポイントを押さえれば他のディストリビューションでもビルド出来ると思われますので、必要であればトライしてみてください。

コレオノイドの最新の開発版では、Ubuntuバージョン 12.04, 14.04, x64アーキテクチャでのビルドと動作を確認しています。


.. contents::
   :local:


ソースコードの取得
------------------

コレオノイド開発版のソースコードは現在 `git <http://git-scm.com/>`_ リポジトリとして管理されており、 `github <https://github.com/>`_ の以下のアドレスにて公開されています。

- https://github.com/s-nakaoka/choreonoid

リポジトリの利用にあたってはgitコマンドが必要です。
Ubuntuでは以下のコマンドでgitをインストールできます。::

 sudo apt-get install git

コレオノイドのリポジトリは以下のコマンドを実行することで取得できます。 ::

 git clone https://github.com/s-nakaoka/choreonoid.git

これによってリポジトリを格納した choreonoid というディレクトリが生成されます。
このディレクトリ内で ::

 git pull

などとすることにより、その時点での最新のソースコードにアップデートできます。

以上でソースコードの取得はできますが、gitの詳しい使用方法についてはgitのマニュアルや解説記事を参照してください。



開発ツールと依存ソフトウェアのインストール
------------------------------------------

コレオノイドをソースコードからビルドするためには、以下の開発ツールが必要になります。

- C/C++標準開発ツール一式: C/C++コンパイラ、Make等の標準開発ツール一式が必要です。Ubuntu であれば 'build-essential' というパッケージで一式インストールできます。C/C++コンパイラに関しては通常GCCを用いますが、Clang/LLVMも利用可能です。
- `CMake <http://www.cmake.org/>`_ :  ビルドツールです。本ツール独自の記述から、MakeやVisual Stuioといった標準ビルドツールのファイルを生成します。多くの環境に対応したビルド記述を効率的に行うことが可能です。

また、基本機能をビルドするにあたっって以下のライブラリも必要になります。

* `Boost C++ Libraries <http://www.boost.org/>`_ : C++の便利なライブラリ集です。
* `Eigen <eigen.tuxfamily.org>`_ : 行列・ベクトル・線形代数演算のための高速・高機能なテンプレートライブラリです。
* `Qt <http://qt-project.org/>`_ : GUIツールキットを含むフレームワークライブラリです。
* `gettext <http://www.gnu.org/s/gettext/>`_ : 表示を多国語対応とするためのツール・ライブラリです。
* `libjpeg <http://libjpeg.sourceforge.net/>`_ : JPEG形式の画像ファイルを読み込むためのライブラリです。
* `libpng <http://www.libpng.org/pub/png/libpng.html>`_ : PNG形式の画像ファイルを読み込むためのライブラリです。
* `LibYAML <http://pyyaml.org/wiki/LibYAML>`_ : YAML形式テキストのパーサです。
* `GLEW <http://glew.sourceforge.net/>`_ : OpenGLの拡張機能を利用するためのライブラリです。

また、オプションの機能をビルドする際には、以下のようなソフトウェアも追加で必要となってきます。

* `Python <https://www.python.org/>`_ : プログラミング言語 Python を用いてコレオノイドを操作するための「Pythonプラグイン」を利用する際に必要となります。通常Pythonは標準でインストールされていますが、プラグインをビルドする際に開発用のライブラリが必要となります。
* `omniORB <http://omniorb.sourceforge.net/>`_ : オープンソースのCORBA実装です。CORBAプラグインやOpenRTMプラグイン、OpenHRPプラグインを利用する際に必要となります。
* `OpenRTM-aist <http://openrtm.org/>`_ : 産総研によるRTミドルウェアの実装です。OpenRTMプラグインをビルドする場合に必要です。
* `Open Dynamics Engine (ODE) <http://www.ode.org/>`_ : 物理計算ライブラリです。この物理計算によるシミュレーションを行うための"ODEプラグイン"を利用する際に必要です。
* `Bullet Physics Library <http://bulletphysics.org>`_ : 物理計算ライブラリです。この物理計算によるシミュレーションを行うための"Bulletプラグイン"を利用する際に必要です。
* `GStreamer <http://gstreamer.freedesktop.org/>`_ : メディアファイルを扱うためのライブラリです。音声ファイルや動画ファイルをコレオノイド上で再生するための「Mediaプラグイン」を利用する際に必要です。
* `PulseAudio <http://www.freedesktop.org/wiki/Software/PulseAudio/>`_ : 音声出力を行うためのシステムです。Ubuntuでは標準でインストールされていますが、Mediaプラグインをビルドする場合には別途開発用ライブラリが必要になります。
* `libsndfile <http://www.mega-nerd.com/libsndfile/>`_ : 音声ファイルを読み込むためのライブラリです。Mediaプラグインをビルドする場合に必要です。

Ubuntuの場合、"misc/script" 以下にある "install-requisities-ubuntu-x.x.sh` というスクリプトを用いることにより、以上のソフトウェアのほとんどを簡単にインストールすることができます。x.xはUbuntuのバージョンに対応します。例えばUbuntu 14.04であれば ::

 misc/script/install-requisities-ubuntu-14.04.sh

を実行すると、sudoのパスワードが求められるので入力してください。すると、パッケージシステム経由で、必要なパッケージが自動でインストールされます。

なお、上にあげたソフトウェアのうち、OpenRTM-aist と Bullet Physics Library についてはこのスクリプトではインストールされません。

OpenRTM-aist については今のところUbuntuの標準パッケージにはなっていません。開発元が用意している追加リポジトリからパッケージをインストールするか、ソースアーカイブからビルドするなどしてください。詳しくはOpenRTM-aistのドキュメントを参照ください。OpenRTMプラグインが必要なければ、インストールする必要はありません。

Bulletについては Ubuntu 14.04 では標準パッケージに含まれているのですが、そちらのパッケージでインストールすると必要なファイルが欠けているようでBulletプラグインをコンパイルできません。従って、Bulletプラグインをビルドする場合にはBulletをソースコードからコンパイルしてインストールするようにしてください。こちらについても、Bulletプラグインが必要なければ、インストールする必要はありません。コンパイルの際にはBulletのCMakeの設定で **BUILD_SHARED_LIBS** と **USE_DOUBLE_PRECISION** をONにしておきます。


CMake によるビルド設定
----------------------

まず、cmake コマンドを使って コレオノイドをビルドするために必要な Makefile を生成します。ソースディレクトリ上で ::

 cmake .

を実行すると、必要なライブラリをチェックし Makefile を生成します。(cmake コマンドのあとのピリオドに注意してください。）

対象バージョンのUbuntuにおいて上述の説明通りに作業を進めていれば問題なくMakefileが生成されるはずですが、必要なライブラリが所定の場所にインストールされていなかったりすると、cmake 実行の際にエラーが出ることがあります。その場合には、適切にインストールを行うか、CMakeによるビルド設定を修正することが必要になります。ビルド設定は cmake コマンドを用いてコマンドラインから行うことも可能ですが、ccmake コマンドを ::

 ccmake .

と実行することにより、各種設定をメニュー形式で行うことも可能です。詳しくは CMake のマニュアルを参照してください。

コレオノイドは、上記のデフォルトではビルドされないオプション機能もいくつか備えています。
それらの概要を :doc:`options` にまとめてありますので、希望する機能がある場合は CMake の設定で有効にしてください。
例えば、Open Dynamics Engine によるシミュレーション機能を使いたい場合は、 **BUILD_ODE_PLUGIN** を "ON" にしておきます。



コレオノイドのビルド
--------------------

CMakeによりMakefile の生成が成功すれば、makeコマンドでコレオノイドをビルドします。
"~/choreonoid" のディレクトリで ::

 make

を実行します。

マルチコアCPUであれば、-j オプションにより並列ビルドを行うことでビルド時間を短縮できます。例えば、 ::

 make -j4

とすると、最大で４つのビルドプロセスが同時に実行されることになります。通常論理コア数に1〜2を足した程度のプロセス数を指定することで、CPU能力を最大限に活かした並列ビルドができるのではないかと思われます。

なお、CMakeが生成した Makefile による make では、実行コマンドの詳細は表示されず、ビルド過程がすっきりとまとまった表示で出力されます。これはビルドの進行を確認する際には大変見やすくてよいのですが、GCCに与えている細かなコンパイルオプションなどは確認できません。その必要があるときには、 ::

 make VERBOSE=1

というように VERBOSE変数をオンにして make を行うことで、全てのコマンド実行文の詳細を出力させることも可能です。

.. note:: 上記の例では説明をシンプルにするため、ソースディレクトリでそのままビルドを行なっていますが、CMakeではサブディレクトリを作ってそこでビルドを行うことが推奨されています。これにより、ソースファイルとビルドのための中間ファイルを分離できますし、デバッグ用・リリース用など、設定を分けて同時に扱うことも可能となります。
 これを行う場合、例えばソースディレクトリのトップで以下のようにします。 :: 

  mkdir build
  cd build
  cmake .. (or ccmake ..)
  make

.. note:: 32ビット環境でGCCを使ってコンパイルする場合、SSE関連の拡張命令を有効とすることで、シミュレーションなどの実行速度がより速いバイナリを生成できます。これはCMakeの **ADDITIONAL_CXX_FLAGS_RELEASE** に以下のようなオプションを入力することで実現できます。 ::

  -mtune=core2 -march=core2 -mfpmath=sse -msse -msse2 -msse3 -mssse3 -msse4 -msse4.1 -msse4.2

 開発者の環境で試したところ、この記述を行うことによりシミュレーションの実行速度が10〜15%程度速くなりました。

 なお、64ビット環境ではデフォルトでこのような拡張命令を使うようになっており、特に設定する必要はありません。また、64ビット環境では、32ビット環境で上記の対応を行った場合よりもさらに実行速度が向上するようです。


インストール
------------

上記の手順でビルドしたコレオノイドの実行ファイル等は、そのまま実行することが可能です。ビルドに成功すれば、binというディレクトリの下に "choreonoid" という実行ファイルが生成されていますので、これを実行してください。 ::

 bin/choreonoid

ビルドに問題がなければ、コレオノイドのウィンドウが起動します。

このようにLinuxにおいては、ビルドを行うソースディレクトリ内に出力された実行ファイルを直接実行することも可能となっています。これで利用してもよいのですが、一方で、 ::

 make install

を実行することで、ビルドしたファイル一式を所定のディレクトリにインストールすることも可能です。
デフォルトでは /usr/local 以下にインストールされますが（この場合 sudo make install としてください）、CMake の **CMAKE_INSTALL_PREFIX** の設定でインストール先のディレクトリを変更することも可能です。なお、通常はインストール先のlibディレクトリに共有ライブラリパスが通っている必要がありますが、 **ENABLE_INSTALL_RPATH** を ON にしておくと、パスが通っていなくてもそのまま動かすことが可能となります。


Qtスタイルの変更による描画速度の改善
------------------------------------

コレオノイドが利用しているGUIライブラリのQtでは、ボタン等のGUI部品の外観をカスタマイズする「スタイル」機能が備わっています。そして、Ubuntuのデフォルト状態では、このQtのスタイルが、Linuxの標準GUIライブラリである "GTK+" の外観と同じになるように設定されています。実はGTK+自体も見た目をカスタマイズする機能を備えているのですが、QtのGTK+スタイルは、GTK+においてカスタマイズされた見た目もダイナミックに反映してくれます。

これは外観の統一という点で大変素晴らしい機能なのですが、GTK+の動的なスタイル設定をQtでも反映させることにはやはりコストがかかってしまうようで、このデフォルト状態ではQtのGUI部品の描画が大変遅くなってしまいます。それでも通常のアプリケーションではさほど問題にならないのですが、コレオノイドでは例えばロボットの関節角の表示や変更を行うGUI機能があり、これをロボットの動きと連動させる場合などには、多くのGUI部品をスムーズに描画することが求められます。しかしQtのスタイルがGTK+スタイルであると、このような場合に描画がスムーズでなくなってしまいます。

これを解決するため、QtのスタイルをGTK+でないスタイルに変更しておくことをお勧めします。これには、"qtconfig-qt4" というコマンドを使うのが簡単です。（アプリケーションメニュー内では通常「Qt4設定」と表示されるようです。）このツールを起動し、「外観」の「GUIスタイル」について、適当な変更を行なってください。例えば "Cleanlooks" スタイルに変更します。そしてメニューの「ファイル」-「保存」を実行すると、この設定が反映されます。これでコレオノイドのGUIもよりスムーズに動くようになります。
