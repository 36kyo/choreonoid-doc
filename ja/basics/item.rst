
プロジェクトとアイテム
======================

プロジェクトとは
----------------

Choreonoidではロボットのシミュレーションや動作の振り付けといった様々な作業を行うことができますが、
ある作業に必要なデータ一式をChoreonoid上で扱える状態にまとめたものを「プロジェクト」と読んでいます。
Choreonoidを用いて何かをする場合には、まずこの「プロジェクト」を作成することになります。
また、作成したプロジェクトは「プロジェクトファイル」としてファイルに保存しておくことができます。
保存しておいたプロジェクトはまた必要になったときに読み込んで使うことができます。


プロジェクトアイテムとは
------------------------

Choreonoidでは、プロジェクトを構成する各々のデータのうち、ユーザの明示的な操作対象となるものを
「プロジェクトアイテム」（略称「アイテム」）と呼んでいます。
一般的にプロジェクトは複数のアイテムからなります。
対応するデータの種類に応じて様々なタイプのアイテムが定義されており、
プロジェクトの目的に応じて構成するアイテムのタイプを使い分けることになります。
また、プラグインを開発することで独自のタイプのアイテムを追加することも可能です。

プロジェクトが複数のアイテムから構成される場合、それらのアイテムの間の関係を定義する必要が一般的に生じます。
Choreonoidはアイテム間の関係をツリー構造で表すようになっており、ツリーの構成はユーザが自由に編集することが可能です。
これを「アイテムツリー」と呼んでいます。


プロジェクトの読み込み
----------------------

メインウィンドウの上部にあるメインメニューから「ファイル」‐「プロジェクトの読み込み」を実行してください。
すると以下のような「Choreonoidプロジェクトファイルの読み込み」ダイアログが表示されます。

.. figure:: images/load_project_dialog.png


サンプルプロジェクト
--------------------

ChoreonoidのソースにはSR1Walk以外にもいくつかサンプルのプロジェクトが付属していますので、
Choreonoidの利用にあたってはそれらを参考にしていただければと思います。
いくつかのサンプルについて以下に概要を記します。いずれでもshare以下の"project"ディレクトリに格納されています。

============================ =============================
 ファイル                    内容                    
============================ =============================
 FallingBoxes.cnoid          箱４つを落下させるシミュレーション
 SR1Walk.cnoid               サンプルの二足歩行ロボットモデル"SR1"の歩行シミュレーション
 SR1WalkHighGain.cnoid       AISTSimulatorItemの「ハイゲインモード」を用いたSR1ロボットの歩行シミュレーション
 SR1Walk2D.cnoid             AISTSimulatorItemの「2Dモード」を用いたSR1ロボットの歩行シミュレーション
 SR1Liftup.cnoid             SR1ロボットが箱をつかんで持ち上げるシミュレーション
 SR1WalkinHouse.cnoid        SR1ロボットが家の中を歩いてテーブルの上のビデオテープを持ち上げるシミュレーション
 PA10Pickup.cnoid            三菱重工製のマニピュレータ"PA10"が箱をつかんで移動させるシミュレーション
 SampleCrawler.coid          クローラ機構によるモバイルロボットを駆動させるシミュレーション
 SampleCrawlerJoystick.coid  クローラ機構によるモバイルロボットをジョイスティックで操作するシミュレーション。USBのジョイスティック（LOGICOOL製ゲームパッドF310にて動作確認）を接続するとスティックを倒すことで操作できます
 TankJoystick.coid           戦車風のモバイルロボットをジョイスティックで操作するシミュレーション。暗いプラント内をロボットのライトで照らして探索する設定となっており、移動の操作に加えて、砲塔（ライト）の向きを変えたり、ライトのON/OFFを行うことができます
 GR001Sample.cnoid           エイチ・ピー・アイ・ジャパン製の二足歩行ロボットキット"GR001"の動作振り付けのサンプル。キーフレームデータ"SampleMotion1"によってロボットを動かすことができます。また、GRobotプラグインをビルド・インストールしておくことにより、GR001の実機を動かすことも可能です
 RIC30Sample.cnoid           株式会社アールティ製の二足歩行ロボットきっと"RIC30"の動作振り付けサンプル。内容はGR001と同様です
 ClosedLinkSample.cnoid      閉ループ機構のモデル化とシミュレーションのサンプル
 ConveyorSample.cnoid        コンベアーベルト機構のシミュレーションサンプル
============================ =============================

上に挙げたもののうち、ロボットの制御を含むサンプルについては、Choreooidビルド時に BUILD_SIMPLE_CONTROLLER_PLUGINとBUILD_SIMPLE_CONTROLLER_SAMPLEをONにしておく必要があります（デフォルトではONになっています）。
また、ここに挙げたもの以外にも、オプションのプラグインを有効にした際などに追加されるサンプルがあります。


SR1Walkプロジェクトの例
-----------------------

ではここで実際のプロジェクトの例を見てみましょう。
Choreonoidではサンプルプロジェクトが多数用意されていますが、
ここではその中から"SR1Walk"という、二足歩行ロボットの歩行シミュレーションを行うプロジェクトについて紹介します。

まずはChoreonoidを起動し、このプロジェクトを格納したプロジェクトファイルを読み込みます。
サンプルプロジェクトはChoreonoidソースの "share/project" ディレクトリ以下に格納されており、
SR1Walkのプロジェクトファイルはこの中にある "SR1Walk.cnoid" というファイルになります。
（このように、プロジェクトファイルには通常 ".cnoid" という拡張子がつきます。）
プロジェクトファイルはインストール先にもコピーされていますので、そちらを読み込んでもOKです。
（その場合、ディレクトリはインストール先の "share/choreonoid-1.5/project" といったディレクトリになる場合があります。）

メインウィンドウの上部にあるメインメニューから「ファイル」‐「プロジェクトの読み込み」を実行してください。
すると以下のような「Choreonoidプロジェクトファイルの読み込み」ダイアログが表示されます。

.. figure:: images/load_project_dialog.png

デフォルトではこのダイアログはChoreonoid上述の"share"ディレクトリを指していますので、
そこから"project"ディレクトリを辿って、SR1Walk.cnoidを探してください。
ファイルが見つかったらこのファイルをダブルクリックするか、「読み込み」ボタンを押します。
するとプロジェクトが読みこまれて、以下のようなロボットが表示されるかと思います。

.. figure:: images/SR1Walk_scene.png

なお、コマンドラインを利用されている場合は、 :doc:`launch` にて紹介した「コマンドライン引数によるプロジェクトファイルの指定」を用いてプロジェクトを読み込むのが効率的です。この場合、コマンドラインから ::

 choreonoid [プロジェクトファイルのディレクトリ]/SR1Walk.cnoid

などと入力すればOKです。

.. シミュレーションの実行
.. ~~~~~~~~~~~~~~~~~~~~~~

以下の図に示す「シミュレーション」ツールバーの左から３番目の「シミュレーション開始ボタン」を押してみてください。

.. figure:: images/SimulationBar_x2.png

するとロボットが歩行を始めるかと思います。

このシミュレーションでは、ロボットの物理モデルが読みこまれており、それが歩行パターンに従ってPD制御されています。
その結果が動力学計算によって計算され、アニメーションによって提示されています。


プロジェクト構成アイテム
------------------------

構成するアイテムは、デフォルトではメインウィンドウの左上に配置されている「アイテムツリービュー」という領域で確認することができます。
SR1Walkプロジェクトにおいては、アイテムツリービューは以下のように表示されているかと思います。

.. figure:: images/ItemTreeView.png

このようにアイテムツリービューに表示されている各項目がアイテムに対応します。

ここで、各アイテムの概要は以下のようになっています。

==================== ============================= =======================
 名前                 タイプ                       内容
==================== ============================= =======================
 World                World                        シミュレーションにおけるひとつの仮想世界に対応
 SR1                  Body                         ロボットモデル"SR1"に対応するアイテム。SR1モデルの形状、関節構造、物理パラメータ、現在状態等の情報を保持している
 SR1WalkController    SimpleController             歩行パターンに基づくPD制御を行うための制御プログラム（コントローラ）に対応するアイテム。シミュレーションの最中にこのアイテムに対応付けられた制御ルーチンが実行され、ロボットの制御が行われる
 ASITSimulator-SR1    BodyMotion                   SR1モデルの動作軌道を格納するアイテム。シミュレーション実行時にシミュレーション結果として生成される。
 Floor                Body                         床のモデル
 AISTSimulator        AISTSimulator                産総研開発のシミュレーションエンジン。このアイテムに関連付けられた動力学計算ルーチンによってシミュレーション結果が計算される
==================== ============================= =======================

アイテムの木構造
----------------

SR1Walkプロジェクトにおいて、各アイテムは以下のような木構造で配置されています。

| + World
|   + SR1
|     + SR1WalkController
|       + AISTSimulator-SR1
|   - Floor
|   - AISTSimulator


この木構造は、アイテムの間の関係を定義するためのものです。
SR1Walkプロジェクトでは、具体的に以下のような関係が表現されています。

まず、Worldの小アイテム（アイテムツリーにおける子ノード）としてロボットと床のモデルであるSR1とFloorが配置されています。
これは、SR1とFloorがどちらもこのWorldアイテムの仮想世界に存在する物体であることを示しています。
これによって、例えばSR1とFloorの間の干渉が計算されることになります。

また、AISTSimulatorもWorldの小アイテムとして配置されています。これによって、AISTSimulatorのシミュレーション対象となる仮想世界がWorldであることを示しています。

このようなWorldアイテムとの関係については、本プロジェクトのように仮想世界がひとつしか無い場合は大きな意味を持たないかもしれません。しかしWorldタイプのアイテムが複数存在する場合は、このようにモデルやシミュレーションエンジンがどのWorldアイテムと関連付けられているかを示すことが必要になってきます。逆に言えばこの仕組みによって、Choreonoidでは同時に複数の仮想世界を扱えるようになっています。

次に、SR1WalkControllerはSR1の小アイテムとして配置されています。これによってこのコントローラの制御対象がSR1ロボットであることを示しています。同一仮想世界内に複数のロボットが存在する場合でも、この仕組みによってロボットとコントローラの関連付けを行うことができます。

ロボットの動作軌道に対応するAISTSimulator-SR1については、SR1WalkControllerの小アイテムとして配置されています。これは２つの関係を示しています。ひとつは、この動作軌道がSR1モデルの動作を表していることです。動作軌道のアイテムはSR1の直接の子ではありませんが、このように子孫であることによっても関連付けがなされます。ただしこの関係だけを示したいのであればSR1の直接の小アイテムとしても良いわけですが、２つ目の関係として、この動作軌道がSR1WalkControllerの制御の結果であることも示すために、このような配置となっています。

以上のように、アイテムのツリー構造によって、アイテム間の様々な関係が表現できています。
また、ツリー内のアイテムの配置はユーザがいつでも自由に動かすことができるようになっていて、
シミュレーションなどの各機能は現在のツリーの状態から動的に関係性を抽出するようになっています。
このようなアイテムとそのツリー構造に基づく統一的で動的なインタフェースによって、
複雑なプロジェクトや機能に関してもシンプルかつ柔軟に扱うことが可能となっています。


アイテムツリーの管理
--------------------

.. ロード、リロード(Ctrl + R), セーブ、ドラッグ、コピー＆ペースト、 etc.


アイテムのプロパティ
--------------------


プロジェクトの保存
------------------

Choreonoid上の現在のプロジェクトの状態は、プロジェクトファイルに保存することができます。
これを行うためには、メインメニューから「ファイル」‐「名前をつけてプロジェクトを保存」を実行してください。
すると「Choreonoidプロジェクトファイルの保存」ダイアログが表示されますので、
保存先のディレクトリやファイル名を指定して、保存を行なってください。プロジェクトファイルには通常".cnoid"という拡張子をつけます。

現在のプロジェクトが元々プロジェクトファイルから読みこまれたものである場合は、メインメニューの「ファイル」-「プロジェクトの保存」によって、上書き保存をすることできます。この上書き保存は、以下の図に示す「ファイルバー」の「プロジェクトを保存」ボタンを押すことによっても実行できます。

.. figure:: images/FileBar_x2.png

.. note:: Choreonoidはまだ開発途上の部分も多く、突然落ちてしまうこともあり得ますので、プロジェクト作成中はこまめにこのボタンを押すことが推奨されます。

元になるプロジェクトファイルが無いときに上書き保存を実行しようとすると、「名前をつけて保存」と同じ機能が実行されます。

プロジェクトファイルはYAMLという形式で保存されます。
YAMLは構造化された情報をシンプルかつ可読性の高いテキストファイル形式で記述するフォーマットです。
ここでは詳細は述べませんが、このYAML形式の採用により、プロジェクトファイルをテキストファイルとして閲覧して内容を確認したり、テキストエディタで内容を編集するといったことで比較的簡単にできるようになっています。

なお、プロジェクトのデータは必ずしも全てがプロジェクトファイルに格納されるわけではありません。例えばSR1Walkプロジェクトにおいては、ロボットや床のモデルはモデルファイルとして別途保存されているものであり、プロジェクトファイルにはそれらのファイル情報のみが記述されています。プロジェクト全体を記録しておくためにはそのように別ファイルとして保存されているものも管理する必要があります。

