
プロジェクトとアイテム
======================

プロジェクトとは
----------------

Choreonoidではロボットのシミュレーションや動作の振り付けといった様々な作業を行うことができますが、
ある作業に必要なデータ一式をChoreonoid上で扱える状態にまとめたものを「プロジェクト」と読んでいます。
Choreonoidを用いて何かをする場合には、まずこの「プロジェクト」を作成することになります。
また、作成したプロジェクトの状態は「プロジェクトファイル」としてファイルに保存しておき、
また必要になったときに読み込んで使うことができます。


プロジェクトアイテムとは
------------------------

Choreonoidでは、プロジェクトを構成する各々のデータのうち、ユーザの明示的な操作対象となるものを
「プロジェクトアイテム」（略称「アイテム」）と呼んでいます。
プロジェクトは一般的に複数のアイテムからなります。
対応するデータの種類に応じて様々なタイプのアイテムが定義されており、
プロジェクトの目的に応じて構成するアイテムのタイプを使い分けることになります。
また、プラグインを開発することで独自のタイプのアイテムを追加することも可能です。

プロジェクトが複数のアイテムから構成される場合、それらのアイテムの間の関係を定義する必要が生じます。
Choreonoidではこれをツリー構造で定義するようになっており、ツリーの構成はユーザが自由に編集することが可能です。
これを「アイテムツリー」と呼んでいます。


プロジェクトの読み込み
----------------------

メインウィンドウの上部にあるメインメニューから「ファイル」‐「プロジェクトの読み込み」を実行してください。
すると以下のような「Choreonoidプロジェクトファイルの読み込み」ダイアログが表示されます。

.. figure:: images/load_project_dialog.png

ここで読み込みたいプロジェクトファイルを指定してください。
なお、プロジェクトファイルには通常 "cnoid" という拡張子がついています。

Choreonoidをコマンドラインから起動している場合は、
:doc:`launch` にて紹介した「コマンドライン引数によるプロジェクトファイルの指定」を用いてプロジェクトを読み込んでもOKです。


サンプルプロジェクト
--------------------

Choreonoidでは標準でいくつかのサンプルプロジェクトが付属しています。
それらのサンプルはChoreonoidのshareディレクトリ以下の"project"ディレクトリに格納されています。
（shareディレクトリはソースアーカイブのshareディレクトリか、インストール先の share/choreonoid-1.5/ といったディレクトリになります。）

以下にいくつかのサンプルの概要を示しますので、興味があるものがあれば読み込んで試してみてください。

============================ =============================
 ファイル                    内容                    
============================ =============================
 FallingBoxes.cnoid          箱４つを落下させるシミュレーション
 SR1Walk.cnoid               サンプルの二足歩行ロボットモデル"SR1"の歩行シミュレーション
 SR1WalkHighGain.cnoid       AISTSimulatorItemの「ハイゲインモード」を用いたSR1ロボットの歩行シミュレーション
 SR1Walk2D.cnoid             AISTSimulatorItemの「2Dモード」を用いたSR1ロボットの歩行シミュレーション
 SR1Liftup.cnoid             SR1ロボットが箱をつかんで持ち上げるシミュレーション
 SR1WalkinHouse.cnoid        SR1ロボットが家の中を歩いてテーブルの上のビデオテープを持ち上げるシミュレーション
 PA10Pickup.cnoid            三菱重工製のマニピュレータ"PA10"が箱をつかんで移動させるシミュレーション
 SampleCrawler.coid          クローラ機構によるモバイルロボットを駆動させるシミュレーション
 SampleCrawlerJoystick.coid  クローラ機構によるモバイルロボットをジョイスティックで操作するシミュレーション。USBのジョイスティック（LOGICOOL製ゲームパッドF310にて動作確認）を接続するとスティックを倒すことで操作できます
 TankJoystick.coid           戦車風のモバイルロボットをジョイスティックで操作するシミュレーション。暗いプラント内をロボットのライトで照らして探索する設定となっており、移動の操作に加えて、砲塔（ライト）の向きを変えたり、ライトのON/OFFを行うことができます
 GR001Sample.cnoid           エイチ・ピー・アイ・ジャパン製の二足歩行ロボットキット"GR001"の動作振り付けのサンプル。キーフレームデータ"SampleMotion1"によってロボットを動かすことができます。また、GRobotプラグインをビルド・インストールしておくことにより、GR001の実機を動かすことも可能です
 RIC30Sample.cnoid           株式会社アールティ製の二足歩行ロボットきっと"RIC30"の動作振り付けサンプル。内容はGR001と同様です
 ClosedLinkSample.cnoid      閉ループ機構のモデル化とシミュレーションのサンプル
 ConveyorSample.cnoid        コンベアーベルト機構のシミュレーションサンプル
============================ =============================

上に挙げたもののうち、ロボットの制御を含むサンプルについては、Choreooidビルド時に BUILD_SIMPLE_CONTROLLER_PLUGINとBUILD_SIMPLE_CONTROLLER_SAMPLEをONにしておく必要があります（デフォルトではONになっています）。
また、ここに挙げたもの以外にも、オプションのプラグインを有効にした際などに追加されるサンプルがあります。


SR1Walkプロジェクトの例
-----------------------

以下ではサンプルの中から"SR1Walk"というプロジェクトを読み込んで、
実際のプロジェクトの例を見てみることにしましょう。
まずこのサンプルのプロジェクトファイルである"SR1Walk.cnoid"を読み込んでください。
するとプロジェクトが読みこまれて、以下のようなロボットが表示されるかと思います。

.. figure:: images/SR1Walk_scene.png

このロボットはサンプルモデルのひとつである"SR1"ロボットです。
SR1Walkプロジェクトは、このSR1ロボットが二足歩行のシミュレーションを行うプロジェクトとなっています。

シミュレーションは、以下の図に示す「シミュレーション」ツールバーの左から３番目の「シミュレーション開始ボタン」を押すと開始します。

.. figure:: images/SimulationBar_x2.png

ボタンを押すとロボットが歩行を始めるかと思います。
このシミュレーションでは、ロボットの物理モデルが読みこまれており、それが歩行パターンに従ってPD制御されています。
その結果が動力学計算によって計算され、アニメーションによって提示されます。


プロジェクト構成アイテム
------------------------

プロジェクトを構成するアイテムは、
デフォルトではメインウィンドウの左上に配置されている「アイテムツリービュー」という領域で確認することができます。
SR1Walkプロジェクトにおいては、アイテムツリービューは以下のように表示されているかと思います。

.. figure:: images/ItemTreeView.png

このようにアイテムツリービューに表示されている各項目がアイテムに対応します。

ここで、各アイテムの概要は以下のようになっています。

==================== ============================= =======================
 名前                 タイプ                       内容
==================== ============================= =======================
 World                World                        シミュレーションにおけるひとつの仮想世界に対応
 SR1                  Body                         ロボットモデル"SR1"に対応するアイテム。SR1モデルの形状、関節構造、物理パラメータ、現在状態等の情報を保持している
 SR1WalkController    SimpleController             歩行パターンに基づくPD制御を行うための制御プログラム（コントローラ）に対応するアイテム。シミュレーションの最中にこのアイテムに対応付けられた制御ルーチンが実行され、ロボットの制御が行われる
 ASITSimulator-SR1    BodyMotion                   SR1モデルの動作軌道を格納するアイテム。シミュレーション実行時にシミュレーション結果として生成される。
 Floor                Body                         床のモデル
 AISTSimulator        AISTSimulator                産総研開発のシミュレーションエンジン。このアイテムに関連付けられた動力学計算ルーチンによってシミュレーション結果が計算される
==================== ============================= =======================

.. note:: ODEプラグインやBulletプラグインをビルドしている場合、
 それらのプラグインによって追加されるシミュレーションエンジンである
 ODESimulatorItemやBulletSimulatorItemが、AISTSimulatorItemの下に続けて読みこまれます。
 この場合、それらのアイテムを選択してシミュレーション開始ボタンを押すことで、それらのエンジンを用いたシミュレーションを行うことができます。

アイテムの木構造
----------------

SR1Walkプロジェクトにおいて、各アイテムは以下のような木構造で配置されています。

| + World
|   + SR1
|     + SR1WalkController
|       + AISTSimulator-SR1
|   + Floor
|   + AISTSimulator


この木構造は、アイテムの間の関係を定義するためのものです。
SR1Walkプロジェクトでは、具体的に以下のような関係が表現されています。

まず、Worldの小アイテム（アイテムツリーにおける子ノード）としてロボットと床のモデルであるSR1とFloorが配置されています。
これは、SR1とFloorがどちらもこのWorldアイテムの仮想世界に存在する物体であることを示しています。
これによって、例えばSR1とFloorの間の干渉が計算されることになります。

また、AISTSimulatorもWorldの小アイテムとして配置されています。これによって、AISTSimulatorのシミュレーション対象となる仮想世界がWorldであることを示しています。

以上のようなWorldアイテムとの関係については、本プロジェクトのように仮想世界がひとつしか存在しない場合は大きな意味を持たないかもしれません。
しかしWorldタイプのアイテムが複数存在する場合は、このようにモデルやシミュレーションエンジンがどのWorldアイテムと関連付けられているかを示すことが必要になってきます。逆に言えばこの仕組みによって、Choreonoidでは同時に複数の仮想世界を扱えるようになっています。

次に、SR1WalkControllerはSR1の小アイテムとして配置されています。これによってこのコントローラの制御対象がSR1ロボットであることを示しています。複数のロボットとコントローラが存在する場合でも、この仕組みによってロボットとコントローラの関連付けを行うことができます。

ロボットの動作軌道に対応するAISTSimulator-SR1については、SR1WalkControllerの小アイテムとして配置されています。これは２つの関係を示しています。ひとつは、この動作軌道がSR1モデルの動作を表していることです。動作軌道のアイテムはSR1の直接の子ではありませんが、このように子孫であることによっても関連付けがなされます。ただしこの関係だけを示したいのであればSR1の直接の小アイテムとしても良いわけですが、２つ目の関係として、この動作軌道がSR1WalkControllerの制御の結果であることも示すために、このような配置となっています。

以上のように、アイテムのツリー構造によって、アイテム間の様々な関係が表現できています。
また、ツリー内のアイテムの配置はユーザがいつでも自由に動かすことができるようになっていて、
シミュレーションなどの各機能は現在のツリーの状態から動的に関係性を抽出するようになっています。
このようなアイテムとそのツリー構造に基づく統一的で動的なインタフェースによって、
複雑なプロジェクトや機能に関してもシンプルかつ柔軟に扱うことが可能となっています。


アイテムツリーの管理
--------------------

選択とチェック
~~~~~~~~~~~~~~

アイテムツリービュー上にてアイテムは「選択」したり「チェック」したりすることができます。
例えば、以下のようにアイテムが３つ存在するとします。

.. image:: images/noitemselection.png

この状態ではどのアイテムも通常の状態です。
ここで "Item2" をマウスでクリックすると、Item2の領域が以下のような表示になります。

.. image:: images/itemselected.png

この状態を、「アイテムが選択された」状態と呼んでいます。

選択状態は他のアイテムを選択するか、ESCキーを押すことで解除されます。
また、ShiftキーやCtrlキーを押しながらアイテムをクリックすることで、複数のアイテムを同時に選択状態にすることも可能です。
さらに、Ctrl + A を押すと全てのアイテムが選択状態になります。

選択状態とは別に、アイテムの「チェック」状態もあります。
これはアイテムの左端に表示されているボックスによって示されます。
このボックス部分をクリックすると、下図のようにボックスにチェックが入ります。

.. image:: images/itemchecked.png

チェックされているボックスを再度クリックすることにより、チェック状態を解除できます。

以下のように、あるアイテムに対して選択とチェックを両方同時に行うことも可能です。

.. image:: images/itemselectedchecked.png

選択状態やチェック状態は、複数のアイテムが操作の対象となり得る場合に、どのアイテムが操作対象であるかをを明示する場面で使われます。
少しややこしいのですが、それぞれの状態は独立して切り替えることが可能となっており、
ある操作を行う際にどちらの状態が参照されるかは、厳密な規定があるわけではなく、各操作に依存したものとなっています。
ですので選択状態とチェック状態のどちらの状態を使うかは、それぞれの操作に対して覚えておく必要があるのですが、
大まかな傾向としては、

* 選択状態
 * アイテムツリー上での基本操作
 * テンポラリな操作
 * 複数のアイテムが候補として競合する場合の選択
* チェック状態
 * 恒常的なON/OFF状態の切り替え
 * 複数の候補が同時に対象となり得る操作

といった使い分けとなっています。

新規作成
~~~~~~~~

アイテムの新規作成はメインメニューの「ファイル」-「新規」から行うことができます。
ここで新たに作成したいアイテムのタイプを選ぶと、名前を決めるためのダイアログが出ますので、
そこで適当な名前（デフォルトの名前でもOK）を入力して「生成」ボタンを押してください。
（アイテムによっては名前以外にも設定項目がある場合もあります。）
するとアイテムが生成されてアイテムツリービューに表示されます。

なお、上記操作を行う際に既存のアイテムがひとつ選択されていると、そのアイテムの小アイテムとして新規作成アイテムが配置されます。

読み込み
~~~~~~~~

ロボットのモデル等、ファイルから読み込むことで生成可能なアイテムもあります。
この場合、メインメニューの「ファイル」-「読み込み」から読み込みたいファイルの種類を選びます。
するとファイル読み込みのダイアログが出るので、それで読み込むファイルを選択してください。
うまく読みこむことができれば、そのファイルに対応したアイテムが生成されます。
新規作成と同様に、既存のアイテムが選択されていれば、そのアイテムの小アイテムとしてアイテムが読み込まれることになります。

また、このようにしてファイルから読み込んだアイテムについては、
アイテムツリービュー上でそのアイテムを選択してCtrl + Rを押すことにより、
その場でアイテムを読み込みなおすことができます。
これはファイルが外部で更新された場合にそれをすぐにChoreonoid上に反映させたい場合に便利です。
例えばモデルのファイルを外部で編集中に、その編集結果をすぐにChoreooid上で確認するといった場面で活用することができます。

名前の変更
~~~~~~~~~~

アイテムツリービュー上でアイテムをダブルクリックすると、アイテム名のテキストを編集できるようになります。
そこで新しい名前を入力することで、アイテム名の変更が可能です。

カット、コピー、ペースト
~~~~~~~~~~~~~~~~~~~~~~~~

アイテムツリービュー上でアイテムを右クリックすると表示されるコンテキストメニューに、

* カット
* コピー（単独）
* コピー（サブツリー）
* ペースト

という項目がありますので、これを用いてカット、コピー、ペーストの操作を行うことができます。

コピーについては、対象のアイテムが小アイテムを有する場合に、「単独」と「サブツリー」で動作が変わり、
「単独」の場合はそのアイテムのみのコピー、「サブツリー」の場合はアイテムが有する全ての子アイテム
（子孫アイテム）を含むかたちでのコピーとなります。

ペーストについては選択状態となっているアイテムの小アイテムとしてペーストされますので、
カット＆ペーストを用いてアイテムの配置を変更することができます。

移動
~~~~

ItemTreeView上でアイテムをドラッグすることで、アイテムの位置を移動させることができます。

例えば以下の図のようにItem1〜Item3の3つのアイテムがあるとします。

.. image:: images/itemdrag0.png

ここでItem3をマウスでドラッグしてItem1に重なる位置まで持って行くと、以下の図の左側のようにItem1を囲う矩形が現れます。
この状態でドラッグを完了すると、右側のようにItem3がItem1の小アイテムとなる位置へ移動します。

.. image:: images/item_drag_to_child.png

あるいは、Item3をドラッグしてItem1とItem2のちょうど中間の位置に持って行くと、
今度はItem1とItem2の間に線が現れます。
この状態でドラッグを完了すると、右側のようにItem1とItem2の間に挿入されるかたちでItem3が移動します。

.. image:: images/item_drag_to_sibling.png

以下の例では、Item1の小アイテムとなっているItem3を、下方の何も無い位置までドラッグしています。
この場合、右側の図のようにツリーのRootに並ぶかたちでItem3が移動します。

.. image:: images/item_drag_to_root.png

このようにアイテムツリービュー上でアイテムのドラッグを行うことで、アイテムの配置を自由に変更することが可能です。

保存
~~~~

アイテムの状態は通常プロジェクトをファイルに保存する際にプロジェクトファイル内にデータが書き込まれて保存されます。

ファイルに保存可能なアイテムについては、


アイテムのプロパティ
--------------------


プロジェクトの保存
------------------

Choreonoid上の現在のプロジェクトの状態は、プロジェクトファイルに保存することができます。
これを行うためには、メインメニューから「ファイル」‐「名前をつけてプロジェクトを保存」を実行してください。
すると「Choreonoidプロジェクトファイルの保存」ダイアログが表示されますので、
保存先のディレクトリやファイル名を指定して、保存を行なってください。プロジェクトファイルには通常".cnoid"という拡張子をつけます。

現在のプロジェクトが元々プロジェクトファイルから読みこまれたものである場合は、メインメニューの「ファイル」-「プロジェクトの保存」によって、上書き保存をすることできます。この上書き保存は、以下の図に示す「ファイルバー」の「プロジェクトを保存」ボタンを押すことによっても実行できます。

.. figure:: images/FileBar_x2.png

.. note:: Choreonoidはまだ開発途上の部分も多く、突然落ちてしまうこともあり得ますので、プロジェクト作成中はこまめにこのボタンを押すことが推奨されます。

元になるプロジェクトファイルが無いときに上書き保存を実行しようとすると、「名前をつけて保存」と同じ機能が実行されます。

プロジェクトファイルはYAMLという形式で保存されます。
YAMLは構造化された情報をシンプルかつ可読性の高いテキストファイル形式で記述するフォーマットです。
ここでは詳細は述べませんが、このYAML形式の採用により、プロジェクトファイルをテキストファイルとして閲覧して内容を確認したり、テキストエディタで内容を編集するといったことで比較的簡単にできるようになっています。

なお、プロジェクトのデータは必ずしも全てがプロジェクトファイルに格納されるわけではありません。例えばSR1Walkプロジェクトにおいては、ロボットや床のモデルはモデルファイルとして別途保存されているものであり、プロジェクトファイルにはそれらのファイル情報のみが記述されています。プロジェクト全体を記録しておくためにはそのように別ファイルとして保存されているものも管理する必要があります。

