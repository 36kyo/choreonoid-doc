ステップ1: JoyトピックのSubscribeによるTankモデルの制御
=======================================================

ステップ1では、ロボットへの指令をROSを用いた通信によってロボットのコントローラに伝え、それに基づいてロボットの制御を行う方法について説明します。具体的には、ジョイスティックの状態をJoyトピックとして送信し、これをコントローラ側で受信することで、ジョイスティックによるTankモデルの操作を行えるようにします。

.. contents::
   :local:

.. _ros_tank_tutorial_invoke_choreonoid_node:

Choreonoidノードの起動
----------------------

前節で説明した準備が完了しましたら、Choreonoidを起動してください。

この際にChoreonoidをROSのノードとして起動する必要があることにご注意ください。 :doc:`../run-choreonoid` で説明しているように、以下のコマンドでROSのChoreonoidノードを起動できます。 ::

 rosrun choreonoid_ros choreonoid

起動に成功すると、Choreonoidのメインウィンドウが表示されます。


シミュレーションプロジェクトの構築
----------------------------------

Choreonoid上にシミュレーション対象となるモデルを読み込んで、プロジェクトを構築しましょう。このチュートリアルではロボットに該当するモデルとして戦車風の :ref:`tank_model` を使用します。これを用いたプロジェクトの作成については、 :doc:`../../simulation/tank-tutorial/index` の :doc:`../../simulation/tank-tutorial/step1` でも行っていますので、そちらを参照の上まずは同じプロジェクトを構築してください。

そこでは環境モデルとしてシンプルな床のモデルを使用していますが、同じチュートリアルの :ref:`tank_tutorial_use_labo_model` で使用しているプラントモデルを使用してもかまいません。そちらの方が、本チュートリアルの後半でカメラ画像の通信を行う際に、よりそれらしい画像を得ることができます。（ただしモデルは重くなりますので、PC環境によってはシンプルな床のモデルの方が扱いやすいかもしれません。）Githubに公開している本チュートリアルのリポジトリでは、プラントモデルを使用しています。

プロジェクトが構築できたら、メインメニューの「ファイル」-「名前を付けてプロジェクトを保存」を使用して、プロジェクトファイルに保存してください。保存先は本チュートリアル用に作成したディレクトリ内にさらに "project" というサブディレクトリを作成し、そこに "step1.cnoid" という名前で格納するようにしましょう。

これにより、本チュートリアルパッケージのディレクトリ・ファイル構成は以下のようになります。 ::

 + choreonoid_ros_tank_tutorial
   + project
     + step1.cnoid

Choreonoid終了後に再度プロジェクトを読み込む場合は、:ref:`ros_tank_tutorial_invoke_choreonoid_node` で用いたコマンドにプロジェクトファイル名をオプションとして付与します。例えば、 ::

 cd ~/catkin_ws/src/choreonoid_ros_tank_tutorial

としてチュートリアル用ディレクトリに移動し、そこで ::

 rosrun choreonoid_ros choreonoid project/step1.cnoid

などとすることにより、step1のプロジェクト込みでChoreonoidノードを起動することができます。

以下で :ref:`ros_tank_tutorial_introduce_launch_file` を行うまでは、この方法でchoreonoidの起動とプロジェクトの読み込みを行うとよいかと思います。


コントローラの導入
------------------

ビルドの準備
~~~~~~~~~~~~

コントローラのソースコード
~~~~~~~~~~~~~~~~~~~~~~~~~~

コントローラのビルド
~~~~~~~~~~~~~~~~~~~~

コントローラの適用
~~~~~~~~~~~~~~~~~~



Joyノードによるジョイスティック状態のPublish
--------------------------------------------

ROSでは様々なデータを「メッセージ」として定義して、それを「トピック」として送信することが可能です。トピックの送信はROSでは「Publish（出版）」と呼ばれ、Publishされたトピックの受信は「Subscribe（購読）」というかたちで行います。これは「Publish-Subscribeモデル」と呼ばれるものです。このあたりはROSユーザはご存知かと思いますが、そうでない場合はROSの解説を参照するようにしてください。

Step1ではPCに接続されているジョイスティック（ゲームパッド）の状態を、このROSトピックとしてPublishし、それをロボットのコントローラからSubscribeすることで、ジョイスティックの状態に基づいたロボットの制御を行います。ROSのサンプルでも同様のものがよくみられます。

これを実現するために、まずジョイスティックの状態をPublishするプログラム（ROSノード）を起動しておきます。

実はこれを行うための「Joyノード」がROSの標準パッケージとして用意されています。以下ではこのjoyノードの導入方法を解説しながら、ROSのトピックやメッセージがどのようなものかについてもあわせて紹介したいと思います。ROSの基本的な事柄を既に習得されている方は以下は飛ばしていただいて結構です。

Joyノードのインストールと起動
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

まずJoyノードを利用できるようにするため、対応する「Joyパッケージ」をインストールします。 ::

 sudo apt install ros-melodic-joy

これはUbuntu 18.04 (Melodic) の場合のパッケージ名です。Ubuntu 16.04 (Kinetic) の場合は以下のコマンドでインストールできます。 ::

 sudo apt install ros-kinetic-joy

Joyパッケージのインストールに成功していれば、以下のコマンドでJoyノードを起動できます。 ::

 rosrun joy joy_node

ただしこれを実行する前にジョイスティックをPCに接続しておいてください。ジョイスティックは一般的なUSB接続のものでしたら使用できるかと思います。

Joyトピックの確認
~~~~~~~~~~~~~~~~~

Joyノードが起動しジョイスティックの検出に成功すると、ジョイスティックの軸やボタンの状態をPublishするトピックが生成されます。これは以下のコマンドで確認できます。 ::

 rostopic list

このコマンドにより、現在システムで利用可能なトピックの一覧が表示されます。ここに ::

 /joy

という表示があるか確認してください。これがJoyノードがPublishしているトピックで、/joyという名前がつけられています。トピックの名前はファイルシステムと同様に階層的に管理できるようになっており、最初のスラッシュは最上位階層に定義された名前であることを示しています。

このjoyトピックがどのようなものかについて確認してみましょう。以下のコマンドを実行してみてください。 ::

 rostopic info /joy

これにより、/joyに対応するトピックの情報が表示されます。これは以下のようになるかと思います。 ::

 Type: sensor_msgs/Joy
 
 Publishers: 
  * /joy_node (http://hostname:34541/)
 
 Subscribers: None

ここで Type の項目に表示されている "sensor_msgs/Joy" というのがこのトピックのメッセージ型です。これはこのトピックがどのようなデータになるかを表しています。他に、このトピックをPublishしているのが /joy_node というノードであることや、現時点ではこれをSubscribeしているノードが存在しないことが表示されています。

ではメッセージ型の内容を確認してみましょう。以下のコマンドを実行してください。 ::

 rosmsg show sensor_msgs/Joy

すると以下のように表示されるかと思います。 ::

 std_msgs/Header header
   uint32 seq
   time stamp
   string frame_id
 float32[] axes
 int32[] buttons

これはメッセージ型 "sensor_msgs/Joy" のデータ構造を表しています。




Choreonoid版Joyノードの利用
---------------------------


コントローラからのJoyトピックのSubscribe
----------------------------------------


ノード接続状況の可視化
----------------------

.. _ros_tank_tutorial_introduce_launch_file:

Launchファイルの導入
--------------------


