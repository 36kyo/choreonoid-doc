
標準ボディモーションファイル形式
================================

.. contents::
   :local:
   :depth: 2

.. highlight:: YAML

概要
----

Choreonoidでは :doc:`../handling-models/bodymodel` の動作軌道を表現するデータとして「ボディモーション」があり、これを格納する「ボディモーションアイテム」は

* :ref:`simulation-result-item-output`
* 振り付け機能で作成した動作の出力先

等に用いられています。

本節では、このボディモーションを読み書きするための標準のファイル形式（標準ボディモーションファイル形式）について解説します。

基本仕様
--------

標準ボディモーションファイルは、ベースの記述形式をYAMLとするテキストファイルとして記述されます。

ファイル名の拡張子については通常 ".seq" という拡張子を付与します。YAML形式なので ".yaml" または ".yml" としてもよいのですが、".seq" を用いることで他のYAMLファイルと区別しやすくなります。seqは "Sequence(シーケンス)"に由来するもので、通常「シーク」と読みます。

ボディモーションではモデル全体の動作を表現するため、

* リンクの位置姿勢の軌道
* 関節角軌道
* その他軌道(ZMP軌道など）

といった複数の種類の軌道データから構成されるようになっています。

標準ボディモーション形式では、そのような複数の動作軌道データを、YAMLの階層構造を利用することでひとつのファイル内に格納します。各々の種類の動作軌道データを「コンポーネント」と呼びます。ファイル形式自体は、任意の種類の動作軌道コンポーネントを列挙することが可能となっています。

ボディモーションでは離散化された軌道を複数の時系列「フレーム」からなるデータとして記述します。フレームは時間軸上に一定の間隔で関連付けられます。この間隔を表す値として、一般的に

* タイムステップ
* フレームレート

の２種類の値があります。

タイムステップはフレーム間の時間間隔に対応し、フレームレートは単位時間あたりのフレーム数に対応します。これらは互いに逆数の関係となります。タイムステップの単位には通常「秒」を用います。対応するフレームレートの単位は「フレーム数／秒」となります。

標準ボディモーションファイルでは、フレームレートを用いてフレームの間隔を指定します。

なお、標準ボディモーションファイルでは、必ずしも一定間隔とは限らないフレームのデータも記述することが可能です。この場合、フレームレートによる指定は行わずに、各フレームに対応する時刻を全てのフレームに対して記述することになります。これについては後述します。


基本構造
--------

標準ボディモーションファイルは以下のような構造で記述されます。 ::

 # トップノード
 type: CompositeSeq
 content: BodyMotion
 formatVersion: 2
 frameRate: 1000
 numFrames: 7261
 components: 
   - 
     # コンポーネント1
     type: MultiSE3Seq
     content: LinkPosition
     numParts: 1
     frameRate: 1000
     numFrames: 7261
     SE3Format: XYZQWQXQYQZ
     frames: 
     # コンポーネント1のフレームデータ
       - フレーム1のデータ
       - フレーム2のデータ
                .
                .
                .
   - 
     # コンポーネント2
     type: MultiValueSeq
     content: JointDisplacement
     numParts: 2
     frameRate: 1000
     numFrames: 7261
     frames: 
     # コンポーネント2のフレームデータ
       - フレーム1のデータ
       - フレーム2のデータ
                .
                .
                .

#以下は説明のためのコメントですので通常は必要ありません。また、フレームのデータについてはここでは模式的な表現としており、実際の記述内容については以下で解説します。

YAML形式ですので、同じ階層にあるデータはインデントを合わせて記述します。上記の例では、各コンポーネントの記述部は、トップレベルからインデントを下げて記述し、インデントレベルも同一とすることが必要です。


トップノード
------------

テキストのトップレベルには、以下のキーからなるマッピングのノードを記述します。

.. list-table:: トップレベルノード
 :widths: 30, 70
 :header-rows: 1

 * - キー
   - 内容
 * - type
   - CompositeSeqを指定
 * - content
   - BodyMotionを指定
 * - formatVersion
   - フォーマットのバージョン。2を指定
 * - frameRate
   - 動作全体でベースとなるフレームレート（フレーム数／秒）を指定
 * - numFrames
   - 動作全体のフレーム数を指定
 * - components
   - リスティング形式でコンポーネントを記述

typeとcontentには指定のものを記述します。

formatVersionは将来的に記述形式の変更を行った場合でも古い形式のデータを読めるようにするためのものです。本ドキュメントで解説している現在のバージョンは2なので、ここでは2を指定します。formatVersionを1とするか、formatVersionの記述がない場合は、古い形式のファイルとみなされます。なお、古い形式についてはここでは解説しません。

frameRate、numFramesについては、動作全体を対象とした値を記述します。実際には各コンポーネントで個別に指定することも可能なのですが、動作全体で統一することが望ましいですし、ここに書いておくと各コンポーネントでの記述を省略することができます。なお、numFramesに関しては情報として提示するためのもので、実際のフレーム数は各コンポーネントに実際に記述されているフレームデータの数となります。

components以下に実際の動作軌道データとなるコンポーネントを記述します。リスティングの形式で複数種類の動作軌道コンポーネントを記述可能です。

コンポーネントノード
--------------------

ひとつのコンポーネントノードには、ひとつの種類の動作軌道データを記述します。各コンポーネントに共通で使用するキーは以下になります。

.. list-table:: コンポーネントノードの共通部分
 :widths: 30, 70
 :header-rows: 1

 * - キー
   - 内容
 * - type
   - 動作軌道のデータ型を文字列で指定
 * - content
   - データの用途を文字列で指定
 * - frameRate
   - フレームレート。省略するとトップノードで指定した値が使われる
 * - numFrames
   - フレーム数を指定
 * - numParts
   - 1フレームの要素数。Multiタイプのデータ形式の場合に有効
 * - frames
   - YAMLシーケンスとしてフレームデータを列挙

typeにはデータ型を、contentにはデータの用途をそれぞれ文字列で指定します。現在のところ、以下のtypeが利用可能です。

.. list-table:: コンポーネントのtype
 :widths: 15, 50, 35
 :header-rows: 1

 * - type
   - データ型
   - contentの例
 * - MultiValueSeq
   - 複数の浮動少数点値からなるフレームの時系列データ
   - JointDisplacement (関節角（変位）軌道）
 * - MultiSE3Seq
   - 複数のSE(3)値（3次元空間中の位置・姿勢）からなるフレームの時系列データ
   - LinkPosition (リンク位置姿勢軌道）
 * - Vector3Seq
   - 3次元ベクトル値ひとつからなるフレームの時系列データ
   - ZMP (ゼロモーメントポイント軌道）

frameRateはトップノードで記述していればその値に合わせることが望ましいです。あるいは、トップノードでの記述があれば、各コンポーネントでは記述を省略することが可能で、その場合トップノードの値が適用されます。

numFramesについてもトップフレームの値との関係はframeRateと同様です。ただし実際のフレーム数はframes以下に記述されているフレームデータの数で決まります。numFramesはあくまで情報提示のために使用されます。

各type、contentの詳細について以下で解説します。

MultiValueSeq型
~~~~~~~~~~~~~~~

複数の浮動少数点値からなるフレームの時系列データです。1フレームあたり、複数のスカラ値で構成されると考えてもよいですし、多次元のベクトル値ひとつで構成されると考えても良いです。もちろん、どちらも同じことではあります。

この型の具体的な用途として、関節角軌道があります。その場合、contentには "JointDisplacement" を指定します。AngleではなくDisplacementとしているのは、関節によっては回転関節ではなく直動関節のものもあるからです。JointDisplacement (関節変位）であればどちらにも当てはまりますし、軌道データもより一般的には「関節変位軌道」と呼べばよいですね。

今のところボディモーションでサポートしているMultiValueSeq型のcontentはJointDisplacementのみですが、ファイル形式としてはどのようなcontentを格納しても結構です。Choreonoid上でボディモーションとして読み込む際にはJointDisplacment以外のコンポーネントは無視されますが、他のソフトウェアで他のcontentを使うようにしても一向に構いません。

MultiValuseSeq型は先頭に"Multi"が付いたタイプであり、この場合はコンポーネントノードの "numParts" が有効となります。そこに１フレームあたりの要素数（次元数）を指定する必要があります。関節変位軌道として用いる場合、関節の数をnumPartsに記述することになります。

frames以下には各フレームをひとつのYAMLシーケンスとして、その中にnumParts個分の数値を記述します。並べる順番は関節IDの順にします。回転関節の角度については単位をラジアンとし、直動関節の場合はメートルとします。

具体的な記述例を以下に示します。

.. code-block:: yaml
 :dedent: 0

   - 
     type: MultiValueSeq
     content: JointDisplacement
     numParts: 2
     frameRate: 100
     numFrames: 100
     frames: 
       - [ 0.0,  0.0  ]
       - [ 0.01, 0.01 ]
       - [ 0.01, 0.02 ]
       - [ 0.02, 0.03 ]
       - [ 0.02, 0.04 ]
               .
               .
               .

これは関節が2つある場合の例です。ここでは6番目のフレーム以降は省略していますが、実際にはnumFramesで指定されている100フレーム分が書かれることになります。

YAMLのブロックスタイル、フロースタイルの使い分けは、一般的にはこの例のようにします。つまり、各フレームのデータの記述にはフロースタイルを用いることとし、それ以外の部分にはブロックスタイルを用います。このように記述すると見やすくまとまってよいかと思います。Choreonoid上からファイルを出力する場合は、このスタイルになります。もちろん、どのようなスタイルで記述したとしても、YAMLのフォーマットとして成立しているのであれば、読み込みには差し支えありません。


MultiSE3Seq型
~~~~~~~~~~~~~

複数のSE(3)値からなるフレームの時系列データです。SE(3)の値は3次元空間中の位置と姿勢（回転）を両方表現する値です。

この型の具体的な用途としては、リンクの位置姿勢の軌道があります。この場合、contentには"LinkPosition"を指定します。

単一リンクのモデルでは、その動きを表現するのにこの型の軌道データが必要となります。また、複数のリンクからなるモデルについて、その関節の動きはJointDisplacmentデータで表現することができますが、モデル全体の動きを表現するためには、やはりルートリンクの位置姿勢の軌道が必要となります。このため、ボディモーションには通常ルートリンクの位置姿勢の軌道データが含まれることになります。

実際に１フレームに含めるリンクの数は、MultiValueSeq型と同様にnumPartsで指定します。並べ方は、リンクインデックスの順番（リンクツリーを深さ優先探索で辿った順番）となります。通常1番目の要素はルートリンクに対応します。

SE(3)は位置と姿勢をあわせて6次元の値になりますが、そのうち姿勢に対応する3次元分については、回転行列、クォータニオン、ロールピッチヨー等の様々な表現方法があります。また、それらの要素をどのように並べるかについても決めておく必要があります。MultiSE3Seq型のコンポーネントでは、これを"SE3Format"というキーで指定します。これに指定可能なシンボルを以下にまとめます。

.. list-table:: SE3Formatのタイプ
 :widths: 20, 80
 :header-rows: 1

 * - シンボル
   - 内容
 * - XYZQWQXQYQZ
   - 姿勢をクォータニオンで記述する。位置のX、Y、Zの後に、クォータニオンのW、X、Y、Zの値を並べる。
 * - XYZQXQYQZQW
   - XYZQWQXQYQZと同様に姿勢をクォータニオンで記述するが、クォータニオンの並べ方をX、Y、Z、Wの順とする。
 * - XYZRPY
   - 姿勢をロールピッチヨー形式で記述する。位置のX、Y、 Zの後に、姿勢のR、P、 Y の値を並べる。

標準の形式は "XYZQWQXQYQZ" です。いずれの場合も、SE(3)の値ひとつ分はひとつのYAMLシーケンスとして記述されます。例えば、SE3Format を "XYZQWQXQYQZ" とした場合、位置 (X, Y, Z) が (1, 2, 3) で姿勢のクォータニオン (W, X, Y, Z) が (1, 0, 0, 0) の値は ::

 [ 1, 2, 3, 1, 0, 0, 0 ]

と記述します。

そして、このようなSE(3)の値をさらにnumParts分のYAMLシーケンスとしてframes以下に並べていきます。

具体的な記述例を以下に示します。

.. code-block:: yaml
 :dedent: 0

  - 
    type: MultiSE3Seq
    content: LinkPosition
    numParts: 1
    frameRate: 100
    numFrames: 100
    SE3Format: XYZQWQXQYQZ
    frames: 
      - [ [ -2, -0.5, 0.1, 1, 0, 0, 0 ] ]
      - [ [ -2, -0.5, 0.1, 1, 0, 0, 0 ] ]
      - [ [ -2, -0.5, 0.1, 1, 0, 0, 0 ] ]
      - [ [ -2, -0.5, 0.1, 1, 0, 0, 0 ] ]
      - [ [ -2, -0.5, 0.1, 1, 0, 0, 0 ] ]
                 .
                 .
                 .

この例のように、numPartsが1の場合でも、各フレームのYAMLシーケンスは２重の入れ子の状態となります。numPartsが2以上の場合、各フレームの記述では、複数のSE(3)値を以下のように並べます。 ::

- [ [ リンク1のSE(3)値 ], [ リンク2のSE(3)値 ], ... , [ 最終リンクのSE(3)値 ] ]

Vector3Seq型
~~~~~~~~~~~~

補足：リンク軌道と関節軌道の組み合わせについて
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

正確には、複数リンクモデルの動きに対応するデータの組み合わせとして、以下が考えられます。

1. 全リンクの位置姿勢の軌道
2. ルートリンクの位置姿勢の軌道 + 全関節角軌道
3. 全リンクの位置姿勢の軌道 + 全関節角軌道

そもそも、1のように全リンクに対して位置姿勢の軌道を与えれば、そのままモデル全体の動きを再現できることになります。これが一番シンプルな表現方法で、この場合関節角軌道は必要なくなります。

これに対して、

1はルートリンクのみ位置姿勢データを格納し、残りのリンクの位置姿勢は関節角データを用いて順運動学で計算するというものです。ロボットの動作データとしてはこの形式のものが多いです。

ただ、もともと全ての関節の位置姿勢が与えられていれば、順運動学を計算する必要もありませんし、関節角データも必要なくなります。これを行うのが2となります。

1の手法は、リンクや関節の剛性が非常に高いことを前提としています。しかし実際

2では1の順運動学のような面倒なことはせず、全てのリンクの位置姿勢をそのまま

モデル全体の動きを表現するには、上記のJointDisplacementデータだけでは不十分です。で表現することができますが、ベースリンクが空間中に固定されていない場合は、ベースリンクの位置姿勢の軌道も


フレーム時刻指定版
------------------
